
Water_sensor_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fd4  08000fd4  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd4  08000fd4  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd4  08000fd4  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd4  08000fd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fd8  08000fd8  00010fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  0800102c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  0800102c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fa8  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000449  00000000  00000000  0002106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000214b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  00021580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001607b  00000000  00000000  00021604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000190a  00000000  00000000  0003767f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000928da  00000000  00000000  00038f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000714  00000000  00000000  000cb864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000cbf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f74 	.word	0x08000f74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08000f74 	.word	0x08000f74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <UART2_Init>:
#include "stm32f4xx.h"
#include <stdio.h>

void UART2_Init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable clocks for GPIOA and USART2
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <UART2_Init+0x64>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a16      	ldr	r2, [pc, #88]	; (8000320 <UART2_Init+0x64>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <UART2_Init+0x64>)
 80002ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <UART2_Init+0x64>)
 80002d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d6:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1; // Set pins PA2 and PA3 in alternate function mode for USART2
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <UART2_Init+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <UART2_Init+0x68>)
 80002de:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0x7 << 8) | (0x7 << 12);
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <UART2_Init+0x68>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <UART2_Init+0x68>)
 80002ea:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80002ee:	6213      	str	r3, [r2, #32]

	USART2->BRR = 0x683;							// Baud Rate Configuration
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <UART2_Init+0x6c>)
 80002f2:	f240 6283 	movw	r2, #1667	; 0x683
 80002f6:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Enable transmitter, receiver, and USART2 module
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <UART2_Init+0x6c>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <UART2_Init+0x6c>)
 80002fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000302:	f043 030c 	orr.w	r3, r3, #12
 8000306:	60d3      	str	r3, [r2, #12]

	USART2->CR1 |= USART_CR1_RXNEIE; // Enable interrupt on receive data register
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <UART2_Init+0x6c>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <UART2_Init+0x6c>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn);					// Enable USART2 interrupt
 8000314:	2026      	movs	r0, #38	; 0x26
 8000316:	f7ff ffb3 	bl	8000280 <__NVIC_EnableIRQ>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40004400 	.word	0x40004400

0800032c <UART2_SendString>:

void UART2_SendString(char *str)		// Send string via UART2
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000334:	e00c      	b.n	8000350 <UART2_SendString+0x24>
		while (!(USART2->SR & USART_SR_TXE))
 8000336:	bf00      	nop
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <UART2_SendString+0x3c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f9      	beq.n	8000338 <UART2_SendString+0xc>
			;	    // Wait until transmit data register is empty
		USART2->DR = *str++;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	607a      	str	r2, [r7, #4]
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <UART2_SendString+0x3c>)
 800034e:	605a      	str	r2, [r3, #4]
	while (*str) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1ee      	bne.n	8000336 <UART2_SendString+0xa>
	}
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40004400 	.word	0x40004400

0800036c <ADC_Init>:

//ADC_HandleTypeDef AdcHandle;
void ADC_Init(void) {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <ADC_Init+0x58>)
 8000372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <ADC_Init+0x58>)
 8000376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037a:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <ADC_Init+0x58>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <ADC_Init+0x58>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0b11 << GPIO_MODER_MODE1_Pos;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <ADC_Init+0x5c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <ADC_Init+0x5c>)
 800038e:	f043 030c 	orr.w	r3, r3, #12
 8000392:	6013      	str	r3, [r2, #0]
	ADC1->SMPR2 |= (0b011 << ADC_SMPR2_SMP1_Pos);
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <ADC_Init+0x60>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <ADC_Init+0x60>)
 800039a:	f043 0318 	orr.w	r3, r3, #24
 800039e:	6113      	str	r3, [r2, #16]
	ADC1->SQR3 |= (1 << ADC_SQR3_SQ1_Pos);
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <ADC_Init+0x60>)
 80003a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003a4:	4a09      	ldr	r2, [pc, #36]	; (80003cc <ADC_Init+0x60>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2 |= ADC_CR2_ADON;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <ADC_Init+0x60>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	4a06      	ldr	r2, [pc, #24]	; (80003cc <ADC_Init+0x60>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6093      	str	r3, [r2, #8]
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020000 	.word	0x40020000
 80003cc:	40012000 	.word	0x40012000

080003d0 <Read_ADC>:

uint16_t Read_ADC(void) {
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_SWSTART;  // Start conversion
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <Read_ADC+0x30>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <Read_ADC+0x30>)
 80003da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003de:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & ADC_SR_EOC))
 80003e0:	bf00      	nop
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <Read_ADC+0x30>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <Read_ADC+0x12>
		;  // Wait for conversion to complete
	return (uint16_t) ADC1->DR;  // Read conversion result
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <Read_ADC+0x30>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	b29b      	uxth	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40012000 	.word	0x40012000

08000404 <GPIO_Init>:

void GPIO_Init(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable clock for GPIOB
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <GPIO_Init+0x88>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a1f      	ldr	r2, [pc, #124]	; (800048c <GPIO_Init+0x88>)
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB0, PB1, and PB2 as output
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <GPIO_Init+0x8c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a1d      	ldr	r2, [pc, #116]	; (8000490 <GPIO_Init+0x8c>)
 800041a:	f043 0315 	orr.w	r3, r3, #21
 800041e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODER2_0);
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2); // Push-pull
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <GPIO_Init+0x8c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <GPIO_Init+0x8c>)
 8000426:	f023 0307 	bic.w	r3, r3, #7
 800042a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR0 | GPIO_OSPEEDER_OSPEEDR1
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <GPIO_Init+0x8c>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <GPIO_Init+0x8c>)
 8000432:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000436:	6093      	str	r3, [r2, #8]
			| GPIO_OSPEEDER_OSPEEDR2); // High speed
	GPIOB->PUPDR &=
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <GPIO_Init+0x8c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a14      	ldr	r2, [pc, #80]	; (8000490 <GPIO_Init+0x8c>)
 800043e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000442:	60d3      	str	r3, [r2, #12]
			~(GPIO_PUPDR_PUPDR0 | GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR2); // No pull-up, pull-down

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; // Enable clock for GPIOD (for PD12)
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <GPIO_Init+0x88>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a10      	ldr	r2, [pc, #64]	; (800048c <GPIO_Init+0x88>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PD12 as output
	GPIOD->MODER |= GPIO_MODER_MODER12_0;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <GPIO_Init+0x90>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <GPIO_Init+0x90>)
 8000456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800045a:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &= ~GPIO_OTYPER_OT12; // Push-pull
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <GPIO_Init+0x90>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <GPIO_Init+0x90>)
 8000462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000466:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12; // High speed
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <GPIO_Init+0x90>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4a09      	ldr	r2, [pc, #36]	; (8000494 <GPIO_Init+0x90>)
 800046e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000472:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR &= ~GPIO_PUPDR_PUPDR12; // No pull-up, pull-down
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <GPIO_Init+0x90>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a06      	ldr	r2, [pc, #24]	; (8000494 <GPIO_Init+0x90>)
 800047a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800047e:	60d3      	str	r3, [r2, #12]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40023800 	.word	0x40023800
 8000490:	40020400 	.word	0x40020400
 8000494:	40020c00 	.word	0x40020c00

08000498 <LED_Control>:

void LED_Control(uint16_t sensorValue) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
	// Turn off all LEDs
	GPIOB->BSRR = GPIO_BSRR_BR0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <LED_Control+0x64>)
 80004a4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004a8:	619a      	str	r2, [r3, #24]

	if (sensorValue >= 0 && sensorValue < 700) {
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80004b0:	d203      	bcs.n	80004ba <LED_Control+0x22>
		// Turn on LED connected to PB0
		GPIOB->BSRR = GPIO_BSRR_BS0;
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <LED_Control+0x64>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	619a      	str	r2, [r3, #24]
 80004b8:	e00e      	b.n	80004d8 <LED_Control+0x40>
	} else if (sensorValue >= 700 && sensorValue < 1600) {
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80004c0:	d307      	bcc.n	80004d2 <LED_Control+0x3a>
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80004c8:	d203      	bcs.n	80004d2 <LED_Control+0x3a>
		// Turn on LED connected to PB1
		GPIOB->BSRR = GPIO_BSRR_BS1;
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <LED_Control+0x64>)
 80004cc:	2202      	movs	r2, #2
 80004ce:	619a      	str	r2, [r3, #24]
 80004d0:	e002      	b.n	80004d8 <LED_Control+0x40>
	} else {
		// Turn on LED connected to PB2
		GPIOB->BSRR = GPIO_BSRR_BS2;
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <LED_Control+0x64>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	619a      	str	r2, [r3, #24]
	}

	GPIOD->BSRR = GPIO_BSRR_BR12;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <LED_Control+0x68>)
 80004da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004de:	619a      	str	r2, [r3, #24]

	if (sensorValue > 1000) {
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e6:	d903      	bls.n	80004f0 <LED_Control+0x58>
		// Turn on the LED connected to PD12
		GPIOD->BSRR = GPIO_BSRR_BS12;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <LED_Control+0x68>)
 80004ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004ee:	619a      	str	r2, [r3, #24]
	}
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020400 	.word	0x40020400
 8000500:	40020c00 	.word	0x40020c00

08000504 <main>:

int main(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0
	// Initialize ADC and UART
	UART2_Init();
 800050a:	f7ff fed7 	bl	80002bc <UART2_Init>
	ADC_Init();
 800050e:	f7ff ff2d 	bl	800036c <ADC_Init>
	GPIO_Init();
 8000512:	f7ff ff77 	bl	8000404 <GPIO_Init>

	char buffer[50];
	while (1) {
		// Read the value from the sensor
		uint16_t sensorValue = Read_ADC();
 8000516:	f7ff ff5b 	bl	80003d0 <Read_ADC>
 800051a:	4603      	mov	r3, r0
 800051c:	867b      	strh	r3, [r7, #50]	; 0x32
		// Convert sensor value to a string
		sprintf(buffer, "Read Value is %d\r\n", sensorValue);
 800051e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000520:	463b      	mov	r3, r7
 8000522:	490b      	ldr	r1, [pc, #44]	; (8000550 <main+0x4c>)
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f935 	bl	8000794 <siprintf>
		// Send the string over UART
		UART2_SendString(buffer);
 800052a:	463b      	mov	r3, r7
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fefd 	bl	800032c <UART2_SendString>

		LED_Control(sensorValue);
 8000532:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffaf 	bl	8000498 <LED_Control>

		// Delay
		for (uint32_t i = 0; i < 500000; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
 800053e:	e002      	b.n	8000546 <main+0x42>
 8000540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000542:	3301      	adds	r3, #1
 8000544:	637b      	str	r3, [r7, #52]	; 0x34
 8000546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000548:	4a02      	ldr	r2, [pc, #8]	; (8000554 <main+0x50>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d9f8      	bls.n	8000540 <main+0x3c>
	while (1) {
 800054e:	e7e2      	b.n	8000516 <main+0x12>
 8000550:	08000f8c 	.word	0x08000f8c
 8000554:	0007a11f 	.word	0x0007a11f

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f000 f934 	bl	80007f4 <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20020000 	.word	0x20020000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	2000006c 	.word	0x2000006c
 80005c0:	200001b8 	.word	0x200001b8

080005c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000612:	f7ff ffd7 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f000 f8f3 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f7ff ff73 	bl	8000504 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800062c:	08000fdc 	.word	0x08000fdc
  ldr r2, =_sbss
 8000630:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000634:	200001b8 	.word	0x200001b8

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <sbrk_aligned>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4e0e      	ldr	r6, [pc, #56]	; (8000678 <sbrk_aligned+0x3c>)
 8000640:	460c      	mov	r4, r1
 8000642:	6831      	ldr	r1, [r6, #0]
 8000644:	4605      	mov	r5, r0
 8000646:	b911      	cbnz	r1, 800064e <sbrk_aligned+0x12>
 8000648:	f000 f8c4 	bl	80007d4 <_sbrk_r>
 800064c:	6030      	str	r0, [r6, #0]
 800064e:	4621      	mov	r1, r4
 8000650:	4628      	mov	r0, r5
 8000652:	f000 f8bf 	bl	80007d4 <_sbrk_r>
 8000656:	1c43      	adds	r3, r0, #1
 8000658:	d00a      	beq.n	8000670 <sbrk_aligned+0x34>
 800065a:	1cc4      	adds	r4, r0, #3
 800065c:	f024 0403 	bic.w	r4, r4, #3
 8000660:	42a0      	cmp	r0, r4
 8000662:	d007      	beq.n	8000674 <sbrk_aligned+0x38>
 8000664:	1a21      	subs	r1, r4, r0
 8000666:	4628      	mov	r0, r5
 8000668:	f000 f8b4 	bl	80007d4 <_sbrk_r>
 800066c:	3001      	adds	r0, #1
 800066e:	d101      	bne.n	8000674 <sbrk_aligned+0x38>
 8000670:	f04f 34ff 	mov.w	r4, #4294967295
 8000674:	4620      	mov	r0, r4
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	20000074 	.word	0x20000074

0800067c <_malloc_r>:
 800067c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000680:	1ccd      	adds	r5, r1, #3
 8000682:	f025 0503 	bic.w	r5, r5, #3
 8000686:	3508      	adds	r5, #8
 8000688:	2d0c      	cmp	r5, #12
 800068a:	bf38      	it	cc
 800068c:	250c      	movcc	r5, #12
 800068e:	2d00      	cmp	r5, #0
 8000690:	4607      	mov	r7, r0
 8000692:	db01      	blt.n	8000698 <_malloc_r+0x1c>
 8000694:	42a9      	cmp	r1, r5
 8000696:	d905      	bls.n	80006a4 <_malloc_r+0x28>
 8000698:	230c      	movs	r3, #12
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	2600      	movs	r6, #0
 800069e:	4630      	mov	r0, r6
 80006a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000778 <_malloc_r+0xfc>
 80006a8:	f000 f868 	bl	800077c <__malloc_lock>
 80006ac:	f8d8 3000 	ldr.w	r3, [r8]
 80006b0:	461c      	mov	r4, r3
 80006b2:	bb5c      	cbnz	r4, 800070c <_malloc_r+0x90>
 80006b4:	4629      	mov	r1, r5
 80006b6:	4638      	mov	r0, r7
 80006b8:	f7ff ffc0 	bl	800063c <sbrk_aligned>
 80006bc:	1c43      	adds	r3, r0, #1
 80006be:	4604      	mov	r4, r0
 80006c0:	d155      	bne.n	800076e <_malloc_r+0xf2>
 80006c2:	f8d8 4000 	ldr.w	r4, [r8]
 80006c6:	4626      	mov	r6, r4
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d145      	bne.n	8000758 <_malloc_r+0xdc>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d048      	beq.n	8000762 <_malloc_r+0xe6>
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	4631      	mov	r1, r6
 80006d4:	4638      	mov	r0, r7
 80006d6:	eb04 0903 	add.w	r9, r4, r3
 80006da:	f000 f87b 	bl	80007d4 <_sbrk_r>
 80006de:	4581      	cmp	r9, r0
 80006e0:	d13f      	bne.n	8000762 <_malloc_r+0xe6>
 80006e2:	6821      	ldr	r1, [r4, #0]
 80006e4:	1a6d      	subs	r5, r5, r1
 80006e6:	4629      	mov	r1, r5
 80006e8:	4638      	mov	r0, r7
 80006ea:	f7ff ffa7 	bl	800063c <sbrk_aligned>
 80006ee:	3001      	adds	r0, #1
 80006f0:	d037      	beq.n	8000762 <_malloc_r+0xe6>
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	442b      	add	r3, r5
 80006f6:	6023      	str	r3, [r4, #0]
 80006f8:	f8d8 3000 	ldr.w	r3, [r8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d038      	beq.n	8000772 <_malloc_r+0xf6>
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	42a2      	cmp	r2, r4
 8000704:	d12b      	bne.n	800075e <_malloc_r+0xe2>
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	e00f      	b.n	800072c <_malloc_r+0xb0>
 800070c:	6822      	ldr	r2, [r4, #0]
 800070e:	1b52      	subs	r2, r2, r5
 8000710:	d41f      	bmi.n	8000752 <_malloc_r+0xd6>
 8000712:	2a0b      	cmp	r2, #11
 8000714:	d917      	bls.n	8000746 <_malloc_r+0xca>
 8000716:	1961      	adds	r1, r4, r5
 8000718:	42a3      	cmp	r3, r4
 800071a:	6025      	str	r5, [r4, #0]
 800071c:	bf18      	it	ne
 800071e:	6059      	strne	r1, [r3, #4]
 8000720:	6863      	ldr	r3, [r4, #4]
 8000722:	bf08      	it	eq
 8000724:	f8c8 1000 	streq.w	r1, [r8]
 8000728:	5162      	str	r2, [r4, r5]
 800072a:	604b      	str	r3, [r1, #4]
 800072c:	4638      	mov	r0, r7
 800072e:	f104 060b 	add.w	r6, r4, #11
 8000732:	f000 f829 	bl	8000788 <__malloc_unlock>
 8000736:	f026 0607 	bic.w	r6, r6, #7
 800073a:	1d23      	adds	r3, r4, #4
 800073c:	1af2      	subs	r2, r6, r3
 800073e:	d0ae      	beq.n	800069e <_malloc_r+0x22>
 8000740:	1b9b      	subs	r3, r3, r6
 8000742:	50a3      	str	r3, [r4, r2]
 8000744:	e7ab      	b.n	800069e <_malloc_r+0x22>
 8000746:	42a3      	cmp	r3, r4
 8000748:	6862      	ldr	r2, [r4, #4]
 800074a:	d1dd      	bne.n	8000708 <_malloc_r+0x8c>
 800074c:	f8c8 2000 	str.w	r2, [r8]
 8000750:	e7ec      	b.n	800072c <_malloc_r+0xb0>
 8000752:	4623      	mov	r3, r4
 8000754:	6864      	ldr	r4, [r4, #4]
 8000756:	e7ac      	b.n	80006b2 <_malloc_r+0x36>
 8000758:	4634      	mov	r4, r6
 800075a:	6876      	ldr	r6, [r6, #4]
 800075c:	e7b4      	b.n	80006c8 <_malloc_r+0x4c>
 800075e:	4613      	mov	r3, r2
 8000760:	e7cc      	b.n	80006fc <_malloc_r+0x80>
 8000762:	230c      	movs	r3, #12
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4638      	mov	r0, r7
 8000768:	f000 f80e 	bl	8000788 <__malloc_unlock>
 800076c:	e797      	b.n	800069e <_malloc_r+0x22>
 800076e:	6025      	str	r5, [r4, #0]
 8000770:	e7dc      	b.n	800072c <_malloc_r+0xb0>
 8000772:	605b      	str	r3, [r3, #4]
 8000774:	deff      	udf	#255	; 0xff
 8000776:	bf00      	nop
 8000778:	20000070 	.word	0x20000070

0800077c <__malloc_lock>:
 800077c:	4801      	ldr	r0, [pc, #4]	; (8000784 <__malloc_lock+0x8>)
 800077e:	f000 b863 	b.w	8000848 <__retarget_lock_acquire_recursive>
 8000782:	bf00      	nop
 8000784:	200001b4 	.word	0x200001b4

08000788 <__malloc_unlock>:
 8000788:	4801      	ldr	r0, [pc, #4]	; (8000790 <__malloc_unlock+0x8>)
 800078a:	f000 b85e 	b.w	800084a <__retarget_lock_release_recursive>
 800078e:	bf00      	nop
 8000790:	200001b4 	.word	0x200001b4

08000794 <siprintf>:
 8000794:	b40e      	push	{r1, r2, r3}
 8000796:	b500      	push	{lr}
 8000798:	b09c      	sub	sp, #112	; 0x70
 800079a:	ab1d      	add	r3, sp, #116	; 0x74
 800079c:	9002      	str	r0, [sp, #8]
 800079e:	9006      	str	r0, [sp, #24]
 80007a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <siprintf+0x38>)
 80007a6:	9107      	str	r1, [sp, #28]
 80007a8:	9104      	str	r1, [sp, #16]
 80007aa:	4909      	ldr	r1, [pc, #36]	; (80007d0 <siprintf+0x3c>)
 80007ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b0:	9105      	str	r1, [sp, #20]
 80007b2:	6800      	ldr	r0, [r0, #0]
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	a902      	add	r1, sp, #8
 80007b8:	f000 f8ee 	bl	8000998 <_svfiprintf_r>
 80007bc:	9b02      	ldr	r3, [sp, #8]
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	b01c      	add	sp, #112	; 0x70
 80007c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80007c8:	b003      	add	sp, #12
 80007ca:	4770      	bx	lr
 80007cc:	2000004c 	.word	0x2000004c
 80007d0:	ffff0208 	.word	0xffff0208

080007d4 <_sbrk_r>:
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	4d06      	ldr	r5, [pc, #24]	; (80007f0 <_sbrk_r+0x1c>)
 80007d8:	2300      	movs	r3, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	602b      	str	r3, [r5, #0]
 80007e0:	f7ff feba 	bl	8000558 <_sbrk>
 80007e4:	1c43      	adds	r3, r0, #1
 80007e6:	d102      	bne.n	80007ee <_sbrk_r+0x1a>
 80007e8:	682b      	ldr	r3, [r5, #0]
 80007ea:	b103      	cbz	r3, 80007ee <_sbrk_r+0x1a>
 80007ec:	6023      	str	r3, [r4, #0]
 80007ee:	bd38      	pop	{r3, r4, r5, pc}
 80007f0:	200001b0 	.word	0x200001b0

080007f4 <__errno>:
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <__errno+0x8>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2000004c 	.word	0x2000004c

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	4d0d      	ldr	r5, [pc, #52]	; (8000838 <__libc_init_array+0x38>)
 8000804:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000806:	1b64      	subs	r4, r4, r5
 8000808:	10a4      	asrs	r4, r4, #2
 800080a:	2600      	movs	r6, #0
 800080c:	42a6      	cmp	r6, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	4d0b      	ldr	r5, [pc, #44]	; (8000840 <__libc_init_array+0x40>)
 8000812:	4c0c      	ldr	r4, [pc, #48]	; (8000844 <__libc_init_array+0x44>)
 8000814:	f000 fbae 	bl	8000f74 <_init>
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	10a4      	asrs	r4, r4, #2
 800081c:	2600      	movs	r6, #0
 800081e:	42a6      	cmp	r6, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f855 3b04 	ldr.w	r3, [r5], #4
 8000828:	4798      	blx	r3
 800082a:	3601      	adds	r6, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000832:	4798      	blx	r3
 8000834:	3601      	adds	r6, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	08000fd4 	.word	0x08000fd4
 800083c:	08000fd4 	.word	0x08000fd4
 8000840:	08000fd4 	.word	0x08000fd4
 8000844:	08000fd8 	.word	0x08000fd8

08000848 <__retarget_lock_acquire_recursive>:
 8000848:	4770      	bx	lr

0800084a <__retarget_lock_release_recursive>:
 800084a:	4770      	bx	lr

0800084c <_free_r>:
 800084c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800084e:	2900      	cmp	r1, #0
 8000850:	d044      	beq.n	80008dc <_free_r+0x90>
 8000852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000856:	9001      	str	r0, [sp, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	f1a1 0404 	sub.w	r4, r1, #4
 800085e:	bfb8      	it	lt
 8000860:	18e4      	addlt	r4, r4, r3
 8000862:	f7ff ff8b 	bl	800077c <__malloc_lock>
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <_free_r+0x94>)
 8000868:	9801      	ldr	r0, [sp, #4]
 800086a:	6813      	ldr	r3, [r2, #0]
 800086c:	b933      	cbnz	r3, 800087c <_free_r+0x30>
 800086e:	6063      	str	r3, [r4, #4]
 8000870:	6014      	str	r4, [r2, #0]
 8000872:	b003      	add	sp, #12
 8000874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000878:	f7ff bf86 	b.w	8000788 <__malloc_unlock>
 800087c:	42a3      	cmp	r3, r4
 800087e:	d908      	bls.n	8000892 <_free_r+0x46>
 8000880:	6825      	ldr	r5, [r4, #0]
 8000882:	1961      	adds	r1, r4, r5
 8000884:	428b      	cmp	r3, r1
 8000886:	bf01      	itttt	eq
 8000888:	6819      	ldreq	r1, [r3, #0]
 800088a:	685b      	ldreq	r3, [r3, #4]
 800088c:	1949      	addeq	r1, r1, r5
 800088e:	6021      	streq	r1, [r4, #0]
 8000890:	e7ed      	b.n	800086e <_free_r+0x22>
 8000892:	461a      	mov	r2, r3
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	b10b      	cbz	r3, 800089c <_free_r+0x50>
 8000898:	42a3      	cmp	r3, r4
 800089a:	d9fa      	bls.n	8000892 <_free_r+0x46>
 800089c:	6811      	ldr	r1, [r2, #0]
 800089e:	1855      	adds	r5, r2, r1
 80008a0:	42a5      	cmp	r5, r4
 80008a2:	d10b      	bne.n	80008bc <_free_r+0x70>
 80008a4:	6824      	ldr	r4, [r4, #0]
 80008a6:	4421      	add	r1, r4
 80008a8:	1854      	adds	r4, r2, r1
 80008aa:	42a3      	cmp	r3, r4
 80008ac:	6011      	str	r1, [r2, #0]
 80008ae:	d1e0      	bne.n	8000872 <_free_r+0x26>
 80008b0:	681c      	ldr	r4, [r3, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	6053      	str	r3, [r2, #4]
 80008b6:	440c      	add	r4, r1
 80008b8:	6014      	str	r4, [r2, #0]
 80008ba:	e7da      	b.n	8000872 <_free_r+0x26>
 80008bc:	d902      	bls.n	80008c4 <_free_r+0x78>
 80008be:	230c      	movs	r3, #12
 80008c0:	6003      	str	r3, [r0, #0]
 80008c2:	e7d6      	b.n	8000872 <_free_r+0x26>
 80008c4:	6825      	ldr	r5, [r4, #0]
 80008c6:	1961      	adds	r1, r4, r5
 80008c8:	428b      	cmp	r3, r1
 80008ca:	bf04      	itt	eq
 80008cc:	6819      	ldreq	r1, [r3, #0]
 80008ce:	685b      	ldreq	r3, [r3, #4]
 80008d0:	6063      	str	r3, [r4, #4]
 80008d2:	bf04      	itt	eq
 80008d4:	1949      	addeq	r1, r1, r5
 80008d6:	6021      	streq	r1, [r4, #0]
 80008d8:	6054      	str	r4, [r2, #4]
 80008da:	e7ca      	b.n	8000872 <_free_r+0x26>
 80008dc:	b003      	add	sp, #12
 80008de:	bd30      	pop	{r4, r5, pc}
 80008e0:	20000070 	.word	0x20000070

080008e4 <__ssputs_r>:
 80008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e8:	688e      	ldr	r6, [r1, #8]
 80008ea:	461f      	mov	r7, r3
 80008ec:	42be      	cmp	r6, r7
 80008ee:	680b      	ldr	r3, [r1, #0]
 80008f0:	4682      	mov	sl, r0
 80008f2:	460c      	mov	r4, r1
 80008f4:	4690      	mov	r8, r2
 80008f6:	d82c      	bhi.n	8000952 <__ssputs_r+0x6e>
 80008f8:	898a      	ldrh	r2, [r1, #12]
 80008fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80008fe:	d026      	beq.n	800094e <__ssputs_r+0x6a>
 8000900:	6965      	ldr	r5, [r4, #20]
 8000902:	6909      	ldr	r1, [r1, #16]
 8000904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000908:	eba3 0901 	sub.w	r9, r3, r1
 800090c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000910:	1c7b      	adds	r3, r7, #1
 8000912:	444b      	add	r3, r9
 8000914:	106d      	asrs	r5, r5, #1
 8000916:	429d      	cmp	r5, r3
 8000918:	bf38      	it	cc
 800091a:	461d      	movcc	r5, r3
 800091c:	0553      	lsls	r3, r2, #21
 800091e:	d527      	bpl.n	8000970 <__ssputs_r+0x8c>
 8000920:	4629      	mov	r1, r5
 8000922:	f7ff feab 	bl	800067c <_malloc_r>
 8000926:	4606      	mov	r6, r0
 8000928:	b360      	cbz	r0, 8000984 <__ssputs_r+0xa0>
 800092a:	6921      	ldr	r1, [r4, #16]
 800092c:	464a      	mov	r2, r9
 800092e:	f000 fadb 	bl	8000ee8 <memcpy>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	81a3      	strh	r3, [r4, #12]
 800093e:	6126      	str	r6, [r4, #16]
 8000940:	6165      	str	r5, [r4, #20]
 8000942:	444e      	add	r6, r9
 8000944:	eba5 0509 	sub.w	r5, r5, r9
 8000948:	6026      	str	r6, [r4, #0]
 800094a:	60a5      	str	r5, [r4, #8]
 800094c:	463e      	mov	r6, r7
 800094e:	42be      	cmp	r6, r7
 8000950:	d900      	bls.n	8000954 <__ssputs_r+0x70>
 8000952:	463e      	mov	r6, r7
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	4632      	mov	r2, r6
 8000958:	4641      	mov	r1, r8
 800095a:	f000 faab 	bl	8000eb4 <memmove>
 800095e:	68a3      	ldr	r3, [r4, #8]
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	60a3      	str	r3, [r4, #8]
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	4433      	add	r3, r6
 8000968:	6023      	str	r3, [r4, #0]
 800096a:	2000      	movs	r0, #0
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	462a      	mov	r2, r5
 8000972:	f000 fac7 	bl	8000f04 <_realloc_r>
 8000976:	4606      	mov	r6, r0
 8000978:	2800      	cmp	r0, #0
 800097a:	d1e0      	bne.n	800093e <__ssputs_r+0x5a>
 800097c:	6921      	ldr	r1, [r4, #16]
 800097e:	4650      	mov	r0, sl
 8000980:	f7ff ff64 	bl	800084c <_free_r>
 8000984:	230c      	movs	r3, #12
 8000986:	f8ca 3000 	str.w	r3, [sl]
 800098a:	89a3      	ldrh	r3, [r4, #12]
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	81a3      	strh	r3, [r4, #12]
 8000992:	f04f 30ff 	mov.w	r0, #4294967295
 8000996:	e7e9      	b.n	800096c <__ssputs_r+0x88>

08000998 <_svfiprintf_r>:
 8000998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800099c:	4698      	mov	r8, r3
 800099e:	898b      	ldrh	r3, [r1, #12]
 80009a0:	061b      	lsls	r3, r3, #24
 80009a2:	b09d      	sub	sp, #116	; 0x74
 80009a4:	4607      	mov	r7, r0
 80009a6:	460d      	mov	r5, r1
 80009a8:	4614      	mov	r4, r2
 80009aa:	d50e      	bpl.n	80009ca <_svfiprintf_r+0x32>
 80009ac:	690b      	ldr	r3, [r1, #16]
 80009ae:	b963      	cbnz	r3, 80009ca <_svfiprintf_r+0x32>
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	f7ff fe63 	bl	800067c <_malloc_r>
 80009b6:	6028      	str	r0, [r5, #0]
 80009b8:	6128      	str	r0, [r5, #16]
 80009ba:	b920      	cbnz	r0, 80009c6 <_svfiprintf_r+0x2e>
 80009bc:	230c      	movs	r3, #12
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	e0d0      	b.n	8000b68 <_svfiprintf_r+0x1d0>
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	616b      	str	r3, [r5, #20]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9309      	str	r3, [sp, #36]	; 0x24
 80009ce:	2320      	movs	r3, #32
 80009d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80009d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80009d8:	2330      	movs	r3, #48	; 0x30
 80009da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000b80 <_svfiprintf_r+0x1e8>
 80009de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80009e2:	f04f 0901 	mov.w	r9, #1
 80009e6:	4623      	mov	r3, r4
 80009e8:	469a      	mov	sl, r3
 80009ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ee:	b10a      	cbz	r2, 80009f4 <_svfiprintf_r+0x5c>
 80009f0:	2a25      	cmp	r2, #37	; 0x25
 80009f2:	d1f9      	bne.n	80009e8 <_svfiprintf_r+0x50>
 80009f4:	ebba 0b04 	subs.w	fp, sl, r4
 80009f8:	d00b      	beq.n	8000a12 <_svfiprintf_r+0x7a>
 80009fa:	465b      	mov	r3, fp
 80009fc:	4622      	mov	r2, r4
 80009fe:	4629      	mov	r1, r5
 8000a00:	4638      	mov	r0, r7
 8000a02:	f7ff ff6f 	bl	80008e4 <__ssputs_r>
 8000a06:	3001      	adds	r0, #1
 8000a08:	f000 80a9 	beq.w	8000b5e <_svfiprintf_r+0x1c6>
 8000a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a0e:	445a      	add	r2, fp
 8000a10:	9209      	str	r2, [sp, #36]	; 0x24
 8000a12:	f89a 3000 	ldrb.w	r3, [sl]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 80a1 	beq.w	8000b5e <_svfiprintf_r+0x1c6>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a26:	f10a 0a01 	add.w	sl, sl, #1
 8000a2a:	9304      	str	r3, [sp, #16]
 8000a2c:	9307      	str	r3, [sp, #28]
 8000a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a32:	931a      	str	r3, [sp, #104]	; 0x68
 8000a34:	4654      	mov	r4, sl
 8000a36:	2205      	movs	r2, #5
 8000a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a3c:	4850      	ldr	r0, [pc, #320]	; (8000b80 <_svfiprintf_r+0x1e8>)
 8000a3e:	f7ff fbcf 	bl	80001e0 <memchr>
 8000a42:	9a04      	ldr	r2, [sp, #16]
 8000a44:	b9d8      	cbnz	r0, 8000a7e <_svfiprintf_r+0xe6>
 8000a46:	06d0      	lsls	r0, r2, #27
 8000a48:	bf44      	itt	mi
 8000a4a:	2320      	movmi	r3, #32
 8000a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a50:	0711      	lsls	r1, r2, #28
 8000a52:	bf44      	itt	mi
 8000a54:	232b      	movmi	r3, #43	; 0x2b
 8000a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8000a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8000a60:	d015      	beq.n	8000a8e <_svfiprintf_r+0xf6>
 8000a62:	9a07      	ldr	r2, [sp, #28]
 8000a64:	4654      	mov	r4, sl
 8000a66:	2000      	movs	r0, #0
 8000a68:	f04f 0c0a 	mov.w	ip, #10
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a72:	3b30      	subs	r3, #48	; 0x30
 8000a74:	2b09      	cmp	r3, #9
 8000a76:	d94d      	bls.n	8000b14 <_svfiprintf_r+0x17c>
 8000a78:	b1b0      	cbz	r0, 8000aa8 <_svfiprintf_r+0x110>
 8000a7a:	9207      	str	r2, [sp, #28]
 8000a7c:	e014      	b.n	8000aa8 <_svfiprintf_r+0x110>
 8000a7e:	eba0 0308 	sub.w	r3, r0, r8
 8000a82:	fa09 f303 	lsl.w	r3, r9, r3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	9304      	str	r3, [sp, #16]
 8000a8a:	46a2      	mov	sl, r4
 8000a8c:	e7d2      	b.n	8000a34 <_svfiprintf_r+0x9c>
 8000a8e:	9b03      	ldr	r3, [sp, #12]
 8000a90:	1d19      	adds	r1, r3, #4
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	9103      	str	r1, [sp, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bfbb      	ittet	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8000aa0:	9307      	strge	r3, [sp, #28]
 8000aa2:	9307      	strlt	r3, [sp, #28]
 8000aa4:	bfb8      	it	lt
 8000aa6:	9204      	strlt	r2, [sp, #16]
 8000aa8:	7823      	ldrb	r3, [r4, #0]
 8000aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8000aac:	d10c      	bne.n	8000ac8 <_svfiprintf_r+0x130>
 8000aae:	7863      	ldrb	r3, [r4, #1]
 8000ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ab2:	d134      	bne.n	8000b1e <_svfiprintf_r+0x186>
 8000ab4:	9b03      	ldr	r3, [sp, #12]
 8000ab6:	1d1a      	adds	r2, r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	9203      	str	r2, [sp, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bfb8      	it	lt
 8000ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ac4:	3402      	adds	r4, #2
 8000ac6:	9305      	str	r3, [sp, #20]
 8000ac8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000b90 <_svfiprintf_r+0x1f8>
 8000acc:	7821      	ldrb	r1, [r4, #0]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	f7ff fb85 	bl	80001e0 <memchr>
 8000ad6:	b138      	cbz	r0, 8000ae8 <_svfiprintf_r+0x150>
 8000ad8:	9b04      	ldr	r3, [sp, #16]
 8000ada:	eba0 000a 	sub.w	r0, r0, sl
 8000ade:	2240      	movs	r2, #64	; 0x40
 8000ae0:	4082      	lsls	r2, r0
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	3401      	adds	r4, #1
 8000ae6:	9304      	str	r3, [sp, #16]
 8000ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <_svfiprintf_r+0x1ec>)
 8000aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000af2:	2206      	movs	r2, #6
 8000af4:	f7ff fb74 	bl	80001e0 <memchr>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d038      	beq.n	8000b6e <_svfiprintf_r+0x1d6>
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <_svfiprintf_r+0x1f0>)
 8000afe:	bb1b      	cbnz	r3, 8000b48 <_svfiprintf_r+0x1b0>
 8000b00:	9b03      	ldr	r3, [sp, #12]
 8000b02:	3307      	adds	r3, #7
 8000b04:	f023 0307 	bic.w	r3, r3, #7
 8000b08:	3308      	adds	r3, #8
 8000b0a:	9303      	str	r3, [sp, #12]
 8000b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b0e:	4433      	add	r3, r6
 8000b10:	9309      	str	r3, [sp, #36]	; 0x24
 8000b12:	e768      	b.n	80009e6 <_svfiprintf_r+0x4e>
 8000b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b18:	460c      	mov	r4, r1
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	e7a6      	b.n	8000a6c <_svfiprintf_r+0xd4>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	3401      	adds	r4, #1
 8000b22:	9305      	str	r3, [sp, #20]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 0c0a 	mov.w	ip, #10
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b30:	3a30      	subs	r2, #48	; 0x30
 8000b32:	2a09      	cmp	r2, #9
 8000b34:	d903      	bls.n	8000b3e <_svfiprintf_r+0x1a6>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0c6      	beq.n	8000ac8 <_svfiprintf_r+0x130>
 8000b3a:	9105      	str	r1, [sp, #20]
 8000b3c:	e7c4      	b.n	8000ac8 <_svfiprintf_r+0x130>
 8000b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b42:	4604      	mov	r4, r0
 8000b44:	2301      	movs	r3, #1
 8000b46:	e7f0      	b.n	8000b2a <_svfiprintf_r+0x192>
 8000b48:	ab03      	add	r3, sp, #12
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	462a      	mov	r2, r5
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_svfiprintf_r+0x1f4>)
 8000b50:	a904      	add	r1, sp, #16
 8000b52:	4638      	mov	r0, r7
 8000b54:	f3af 8000 	nop.w
 8000b58:	1c42      	adds	r2, r0, #1
 8000b5a:	4606      	mov	r6, r0
 8000b5c:	d1d6      	bne.n	8000b0c <_svfiprintf_r+0x174>
 8000b5e:	89ab      	ldrh	r3, [r5, #12]
 8000b60:	065b      	lsls	r3, r3, #25
 8000b62:	f53f af2d 	bmi.w	80009c0 <_svfiprintf_r+0x28>
 8000b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b68:	b01d      	add	sp, #116	; 0x74
 8000b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6e:	ab03      	add	r3, sp, #12
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	462a      	mov	r2, r5
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <_svfiprintf_r+0x1f4>)
 8000b76:	a904      	add	r1, sp, #16
 8000b78:	4638      	mov	r0, r7
 8000b7a:	f000 f879 	bl	8000c70 <_printf_i>
 8000b7e:	e7eb      	b.n	8000b58 <_svfiprintf_r+0x1c0>
 8000b80:	08000f9f 	.word	0x08000f9f
 8000b84:	08000fa9 	.word	0x08000fa9
 8000b88:	00000000 	.word	0x00000000
 8000b8c:	080008e5 	.word	0x080008e5
 8000b90:	08000fa5 	.word	0x08000fa5

08000b94 <_printf_common>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	4616      	mov	r6, r2
 8000b9a:	4699      	mov	r9, r3
 8000b9c:	688a      	ldr	r2, [r1, #8]
 8000b9e:	690b      	ldr	r3, [r1, #16]
 8000ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	bfb8      	it	lt
 8000ba8:	4613      	movlt	r3, r2
 8000baa:	6033      	str	r3, [r6, #0]
 8000bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000bb0:	4607      	mov	r7, r0
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	b10a      	cbz	r2, 8000bba <_printf_common+0x26>
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	6033      	str	r3, [r6, #0]
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	0699      	lsls	r1, r3, #26
 8000bbe:	bf42      	ittt	mi
 8000bc0:	6833      	ldrmi	r3, [r6, #0]
 8000bc2:	3302      	addmi	r3, #2
 8000bc4:	6033      	strmi	r3, [r6, #0]
 8000bc6:	6825      	ldr	r5, [r4, #0]
 8000bc8:	f015 0506 	ands.w	r5, r5, #6
 8000bcc:	d106      	bne.n	8000bdc <_printf_common+0x48>
 8000bce:	f104 0a19 	add.w	sl, r4, #25
 8000bd2:	68e3      	ldr	r3, [r4, #12]
 8000bd4:	6832      	ldr	r2, [r6, #0]
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	dc26      	bgt.n	8000c2a <_printf_common+0x96>
 8000bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000be0:	1e13      	subs	r3, r2, #0
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	bf18      	it	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	0692      	lsls	r2, r2, #26
 8000bea:	d42b      	bmi.n	8000c44 <_printf_common+0xb0>
 8000bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	47c0      	blx	r8
 8000bf6:	3001      	adds	r0, #1
 8000bf8:	d01e      	beq.n	8000c38 <_printf_common+0xa4>
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	6922      	ldr	r2, [r4, #16]
 8000bfe:	f003 0306 	and.w	r3, r3, #6
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf02      	ittt	eq
 8000c06:	68e5      	ldreq	r5, [r4, #12]
 8000c08:	6833      	ldreq	r3, [r6, #0]
 8000c0a:	1aed      	subeq	r5, r5, r3
 8000c0c:	68a3      	ldr	r3, [r4, #8]
 8000c0e:	bf0c      	ite	eq
 8000c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c14:	2500      	movne	r5, #0
 8000c16:	4293      	cmp	r3, r2
 8000c18:	bfc4      	itt	gt
 8000c1a:	1a9b      	subgt	r3, r3, r2
 8000c1c:	18ed      	addgt	r5, r5, r3
 8000c1e:	2600      	movs	r6, #0
 8000c20:	341a      	adds	r4, #26
 8000c22:	42b5      	cmp	r5, r6
 8000c24:	d11a      	bne.n	8000c5c <_printf_common+0xc8>
 8000c26:	2000      	movs	r0, #0
 8000c28:	e008      	b.n	8000c3c <_printf_common+0xa8>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4638      	mov	r0, r7
 8000c32:	47c0      	blx	r8
 8000c34:	3001      	adds	r0, #1
 8000c36:	d103      	bne.n	8000c40 <_printf_common+0xac>
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	3501      	adds	r5, #1
 8000c42:	e7c6      	b.n	8000bd2 <_printf_common+0x3e>
 8000c44:	18e1      	adds	r1, r4, r3
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	2030      	movs	r0, #48	; 0x30
 8000c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c4e:	4422      	add	r2, r4
 8000c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c58:	3302      	adds	r3, #2
 8000c5a:	e7c7      	b.n	8000bec <_printf_common+0x58>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4622      	mov	r2, r4
 8000c60:	4649      	mov	r1, r9
 8000c62:	4638      	mov	r0, r7
 8000c64:	47c0      	blx	r8
 8000c66:	3001      	adds	r0, #1
 8000c68:	d0e6      	beq.n	8000c38 <_printf_common+0xa4>
 8000c6a:	3601      	adds	r6, #1
 8000c6c:	e7d9      	b.n	8000c22 <_printf_common+0x8e>
	...

08000c70 <_printf_i>:
 8000c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	7e0f      	ldrb	r7, [r1, #24]
 8000c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c78:	2f78      	cmp	r7, #120	; 0x78
 8000c7a:	4691      	mov	r9, r2
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	469a      	mov	sl, r3
 8000c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c86:	d807      	bhi.n	8000c98 <_printf_i+0x28>
 8000c88:	2f62      	cmp	r7, #98	; 0x62
 8000c8a:	d80a      	bhi.n	8000ca2 <_printf_i+0x32>
 8000c8c:	2f00      	cmp	r7, #0
 8000c8e:	f000 80d4 	beq.w	8000e3a <_printf_i+0x1ca>
 8000c92:	2f58      	cmp	r7, #88	; 0x58
 8000c94:	f000 80c0 	beq.w	8000e18 <_printf_i+0x1a8>
 8000c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ca0:	e03a      	b.n	8000d18 <_printf_i+0xa8>
 8000ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ca6:	2b15      	cmp	r3, #21
 8000ca8:	d8f6      	bhi.n	8000c98 <_printf_i+0x28>
 8000caa:	a101      	add	r1, pc, #4	; (adr r1, 8000cb0 <_printf_i+0x40>)
 8000cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cb0:	08000d09 	.word	0x08000d09
 8000cb4:	08000d1d 	.word	0x08000d1d
 8000cb8:	08000c99 	.word	0x08000c99
 8000cbc:	08000c99 	.word	0x08000c99
 8000cc0:	08000c99 	.word	0x08000c99
 8000cc4:	08000c99 	.word	0x08000c99
 8000cc8:	08000d1d 	.word	0x08000d1d
 8000ccc:	08000c99 	.word	0x08000c99
 8000cd0:	08000c99 	.word	0x08000c99
 8000cd4:	08000c99 	.word	0x08000c99
 8000cd8:	08000c99 	.word	0x08000c99
 8000cdc:	08000e21 	.word	0x08000e21
 8000ce0:	08000d49 	.word	0x08000d49
 8000ce4:	08000ddb 	.word	0x08000ddb
 8000ce8:	08000c99 	.word	0x08000c99
 8000cec:	08000c99 	.word	0x08000c99
 8000cf0:	08000e43 	.word	0x08000e43
 8000cf4:	08000c99 	.word	0x08000c99
 8000cf8:	08000d49 	.word	0x08000d49
 8000cfc:	08000c99 	.word	0x08000c99
 8000d00:	08000c99 	.word	0x08000c99
 8000d04:	08000de3 	.word	0x08000de3
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	1d1a      	adds	r2, r3, #4
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	602a      	str	r2, [r5, #0]
 8000d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e09f      	b.n	8000e5c <_printf_i+0x1ec>
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	682b      	ldr	r3, [r5, #0]
 8000d20:	0607      	lsls	r7, r0, #24
 8000d22:	f103 0104 	add.w	r1, r3, #4
 8000d26:	6029      	str	r1, [r5, #0]
 8000d28:	d501      	bpl.n	8000d2e <_printf_i+0xbe>
 8000d2a:	681e      	ldr	r6, [r3, #0]
 8000d2c:	e003      	b.n	8000d36 <_printf_i+0xc6>
 8000d2e:	0646      	lsls	r6, r0, #25
 8000d30:	d5fb      	bpl.n	8000d2a <_printf_i+0xba>
 8000d32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	da03      	bge.n	8000d42 <_printf_i+0xd2>
 8000d3a:	232d      	movs	r3, #45	; 0x2d
 8000d3c:	4276      	negs	r6, r6
 8000d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d42:	485a      	ldr	r0, [pc, #360]	; (8000eac <_printf_i+0x23c>)
 8000d44:	230a      	movs	r3, #10
 8000d46:	e012      	b.n	8000d6e <_printf_i+0xfe>
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	6820      	ldr	r0, [r4, #0]
 8000d4c:	1d19      	adds	r1, r3, #4
 8000d4e:	6029      	str	r1, [r5, #0]
 8000d50:	0605      	lsls	r5, r0, #24
 8000d52:	d501      	bpl.n	8000d58 <_printf_i+0xe8>
 8000d54:	681e      	ldr	r6, [r3, #0]
 8000d56:	e002      	b.n	8000d5e <_printf_i+0xee>
 8000d58:	0641      	lsls	r1, r0, #25
 8000d5a:	d5fb      	bpl.n	8000d54 <_printf_i+0xe4>
 8000d5c:	881e      	ldrh	r6, [r3, #0]
 8000d5e:	4853      	ldr	r0, [pc, #332]	; (8000eac <_printf_i+0x23c>)
 8000d60:	2f6f      	cmp	r7, #111	; 0x6f
 8000d62:	bf0c      	ite	eq
 8000d64:	2308      	moveq	r3, #8
 8000d66:	230a      	movne	r3, #10
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d6e:	6865      	ldr	r5, [r4, #4]
 8000d70:	60a5      	str	r5, [r4, #8]
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	bfa2      	ittt	ge
 8000d76:	6821      	ldrge	r1, [r4, #0]
 8000d78:	f021 0104 	bicge.w	r1, r1, #4
 8000d7c:	6021      	strge	r1, [r4, #0]
 8000d7e:	b90e      	cbnz	r6, 8000d84 <_printf_i+0x114>
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d04b      	beq.n	8000e1c <_printf_i+0x1ac>
 8000d84:	4615      	mov	r5, r2
 8000d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8000d8e:	5dc7      	ldrb	r7, [r0, r7]
 8000d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d94:	4637      	mov	r7, r6
 8000d96:	42bb      	cmp	r3, r7
 8000d98:	460e      	mov	r6, r1
 8000d9a:	d9f4      	bls.n	8000d86 <_printf_i+0x116>
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d10b      	bne.n	8000db8 <_printf_i+0x148>
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	07de      	lsls	r6, r3, #31
 8000da4:	d508      	bpl.n	8000db8 <_printf_i+0x148>
 8000da6:	6923      	ldr	r3, [r4, #16]
 8000da8:	6861      	ldr	r1, [r4, #4]
 8000daa:	4299      	cmp	r1, r3
 8000dac:	bfde      	ittt	le
 8000dae:	2330      	movle	r3, #48	; 0x30
 8000db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000db8:	1b52      	subs	r2, r2, r5
 8000dba:	6122      	str	r2, [r4, #16]
 8000dbc:	f8cd a000 	str.w	sl, [sp]
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	aa03      	add	r2, sp, #12
 8000dc4:	4621      	mov	r1, r4
 8000dc6:	4640      	mov	r0, r8
 8000dc8:	f7ff fee4 	bl	8000b94 <_printf_common>
 8000dcc:	3001      	adds	r0, #1
 8000dce:	d14a      	bne.n	8000e66 <_printf_i+0x1f6>
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	b004      	add	sp, #16
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <_printf_i+0x240>)
 8000de4:	2778      	movs	r7, #120	; 0x78
 8000de6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	6829      	ldr	r1, [r5, #0]
 8000dee:	061f      	lsls	r7, r3, #24
 8000df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000df4:	d402      	bmi.n	8000dfc <_printf_i+0x18c>
 8000df6:	065f      	lsls	r7, r3, #25
 8000df8:	bf48      	it	mi
 8000dfa:	b2b6      	uxthmi	r6, r6
 8000dfc:	07df      	lsls	r7, r3, #31
 8000dfe:	bf48      	it	mi
 8000e00:	f043 0320 	orrmi.w	r3, r3, #32
 8000e04:	6029      	str	r1, [r5, #0]
 8000e06:	bf48      	it	mi
 8000e08:	6023      	strmi	r3, [r4, #0]
 8000e0a:	b91e      	cbnz	r6, 8000e14 <_printf_i+0x1a4>
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	f023 0320 	bic.w	r3, r3, #32
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	2310      	movs	r3, #16
 8000e16:	e7a7      	b.n	8000d68 <_printf_i+0xf8>
 8000e18:	4824      	ldr	r0, [pc, #144]	; (8000eac <_printf_i+0x23c>)
 8000e1a:	e7e4      	b.n	8000de6 <_printf_i+0x176>
 8000e1c:	4615      	mov	r5, r2
 8000e1e:	e7bd      	b.n	8000d9c <_printf_i+0x12c>
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	6826      	ldr	r6, [r4, #0]
 8000e24:	6961      	ldr	r1, [r4, #20]
 8000e26:	1d18      	adds	r0, r3, #4
 8000e28:	6028      	str	r0, [r5, #0]
 8000e2a:	0635      	lsls	r5, r6, #24
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	d501      	bpl.n	8000e34 <_printf_i+0x1c4>
 8000e30:	6019      	str	r1, [r3, #0]
 8000e32:	e002      	b.n	8000e3a <_printf_i+0x1ca>
 8000e34:	0670      	lsls	r0, r6, #25
 8000e36:	d5fb      	bpl.n	8000e30 <_printf_i+0x1c0>
 8000e38:	8019      	strh	r1, [r3, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6123      	str	r3, [r4, #16]
 8000e3e:	4615      	mov	r5, r2
 8000e40:	e7bc      	b.n	8000dbc <_printf_i+0x14c>
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	1d1a      	adds	r2, r3, #4
 8000e46:	602a      	str	r2, [r5, #0]
 8000e48:	681d      	ldr	r5, [r3, #0]
 8000e4a:	6862      	ldr	r2, [r4, #4]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f7ff f9c6 	bl	80001e0 <memchr>
 8000e54:	b108      	cbz	r0, 8000e5a <_printf_i+0x1ea>
 8000e56:	1b40      	subs	r0, r0, r5
 8000e58:	6060      	str	r0, [r4, #4]
 8000e5a:	6863      	ldr	r3, [r4, #4]
 8000e5c:	6123      	str	r3, [r4, #16]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e64:	e7aa      	b.n	8000dbc <_printf_i+0x14c>
 8000e66:	6923      	ldr	r3, [r4, #16]
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	47d0      	blx	sl
 8000e70:	3001      	adds	r0, #1
 8000e72:	d0ad      	beq.n	8000dd0 <_printf_i+0x160>
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	079b      	lsls	r3, r3, #30
 8000e78:	d413      	bmi.n	8000ea2 <_printf_i+0x232>
 8000e7a:	68e0      	ldr	r0, [r4, #12]
 8000e7c:	9b03      	ldr	r3, [sp, #12]
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	bfb8      	it	lt
 8000e82:	4618      	movlt	r0, r3
 8000e84:	e7a6      	b.n	8000dd4 <_printf_i+0x164>
 8000e86:	2301      	movs	r3, #1
 8000e88:	4632      	mov	r2, r6
 8000e8a:	4649      	mov	r1, r9
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	47d0      	blx	sl
 8000e90:	3001      	adds	r0, #1
 8000e92:	d09d      	beq.n	8000dd0 <_printf_i+0x160>
 8000e94:	3501      	adds	r5, #1
 8000e96:	68e3      	ldr	r3, [r4, #12]
 8000e98:	9903      	ldr	r1, [sp, #12]
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	42ab      	cmp	r3, r5
 8000e9e:	dcf2      	bgt.n	8000e86 <_printf_i+0x216>
 8000ea0:	e7eb      	b.n	8000e7a <_printf_i+0x20a>
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	f104 0619 	add.w	r6, r4, #25
 8000ea8:	e7f5      	b.n	8000e96 <_printf_i+0x226>
 8000eaa:	bf00      	nop
 8000eac:	08000fb0 	.word	0x08000fb0
 8000eb0:	08000fc1 	.word	0x08000fc1

08000eb4 <memmove>:
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	b510      	push	{r4, lr}
 8000eb8:	eb01 0402 	add.w	r4, r1, r2
 8000ebc:	d902      	bls.n	8000ec4 <memmove+0x10>
 8000ebe:	4284      	cmp	r4, r0
 8000ec0:	4623      	mov	r3, r4
 8000ec2:	d807      	bhi.n	8000ed4 <memmove+0x20>
 8000ec4:	1e43      	subs	r3, r0, #1
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	d008      	beq.n	8000edc <memmove+0x28>
 8000eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000ed2:	e7f8      	b.n	8000ec6 <memmove+0x12>
 8000ed4:	4402      	add	r2, r0
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d100      	bne.n	8000ede <memmove+0x2a>
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ee6:	e7f7      	b.n	8000ed8 <memmove+0x24>

08000ee8 <memcpy>:
 8000ee8:	440a      	add	r2, r1
 8000eea:	4291      	cmp	r1, r2
 8000eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef0:	d100      	bne.n	8000ef4 <memcpy+0xc>
 8000ef2:	4770      	bx	lr
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000efe:	4291      	cmp	r1, r2
 8000f00:	d1f9      	bne.n	8000ef6 <memcpy+0xe>
 8000f02:	bd10      	pop	{r4, pc}

08000f04 <_realloc_r>:
 8000f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f08:	4680      	mov	r8, r0
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	460e      	mov	r6, r1
 8000f0e:	b921      	cbnz	r1, 8000f1a <_realloc_r+0x16>
 8000f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f14:	4611      	mov	r1, r2
 8000f16:	f7ff bbb1 	b.w	800067c <_malloc_r>
 8000f1a:	b92a      	cbnz	r2, 8000f28 <_realloc_r+0x24>
 8000f1c:	f7ff fc96 	bl	800084c <_free_r>
 8000f20:	4625      	mov	r5, r4
 8000f22:	4628      	mov	r0, r5
 8000f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f28:	f000 f81b 	bl	8000f62 <_malloc_usable_size_r>
 8000f2c:	4284      	cmp	r4, r0
 8000f2e:	4607      	mov	r7, r0
 8000f30:	d802      	bhi.n	8000f38 <_realloc_r+0x34>
 8000f32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f36:	d812      	bhi.n	8000f5e <_realloc_r+0x5a>
 8000f38:	4621      	mov	r1, r4
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	f7ff fb9e 	bl	800067c <_malloc_r>
 8000f40:	4605      	mov	r5, r0
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d0ed      	beq.n	8000f22 <_realloc_r+0x1e>
 8000f46:	42bc      	cmp	r4, r7
 8000f48:	4622      	mov	r2, r4
 8000f4a:	4631      	mov	r1, r6
 8000f4c:	bf28      	it	cs
 8000f4e:	463a      	movcs	r2, r7
 8000f50:	f7ff ffca 	bl	8000ee8 <memcpy>
 8000f54:	4631      	mov	r1, r6
 8000f56:	4640      	mov	r0, r8
 8000f58:	f7ff fc78 	bl	800084c <_free_r>
 8000f5c:	e7e1      	b.n	8000f22 <_realloc_r+0x1e>
 8000f5e:	4635      	mov	r5, r6
 8000f60:	e7df      	b.n	8000f22 <_realloc_r+0x1e>

08000f62 <_malloc_usable_size_r>:
 8000f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f66:	1f18      	subs	r0, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bfbc      	itt	lt
 8000f6c:	580b      	ldrlt	r3, [r1, r0]
 8000f6e:	18c0      	addlt	r0, r0, r3
 8000f70:	4770      	bx	lr
	...

08000f74 <_init>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	bf00      	nop
 8000f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7a:	bc08      	pop	{r3}
 8000f7c:	469e      	mov	lr, r3
 8000f7e:	4770      	bx	lr

08000f80 <_fini>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr
