
Modbus_rs485_npk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800317c  0800317c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800317c  0800317c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800317c  0800317c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000078  080031fc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  080031fc  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000888a  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4f  00000000  00000000  00028975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000578  00000000  00000000  0002ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017661  00000000  00000000  0002b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e87  00000000  00000000  00042719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c89d  00000000  00000000  0004c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024d0  00000000  00000000  000d8e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000db310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080030f8 	.word	0x080030f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080030f8 	.word	0x080030f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Clock_Init>:

#include "stm32f4xx.h"
#include <stdio.h>
#include "Clock_config.h"

void Clock_Init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000284:	4b24      	ldr	r3, [pc, #144]	; (8000318 <Clock_Init+0x98>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a23      	ldr	r2, [pc, #140]	; (8000318 <Clock_Init+0x98>)
 800028a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY))
 8000290:	bf00      	nop
 8000292:	4b21      	ldr	r3, [pc, #132]	; (8000318 <Clock_Init+0x98>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <Clock_Init+0x12>
		;
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800029e:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <Clock_Init+0x98>)
 80002a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a2:	4a1d      	ldr	r2, [pc, #116]	; (8000318 <Clock_Init+0x98>)
 80002a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a8:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <Clock_Init+0x9c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a1b      	ldr	r2, [pc, #108]	; (800031c <Clock_Init+0x9c>)
 80002b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002b4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <Clock_Init+0xa0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a19      	ldr	r2, [pc, #100]	; (8000320 <Clock_Init+0xa0>)
 80002bc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80002c0:	f043 0303 	orr.w	r3, r3, #3
 80002c4:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSE | 12 | (192 << 6) | (1 << 16) | (4 << 24));
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <Clock_Init+0x98>)
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <Clock_Init+0xa4>)
 80002ca:	605a      	str	r2, [r3, #4]

	RCC->CR |= RCC_CR_PLLON;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <Clock_Init+0x98>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <Clock_Init+0x98>)
 80002d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY))
 80002d8:	bf00      	nop
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <Clock_Init+0x98>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <Clock_Init+0x5a>
		;
	RCC->CFGR &= ~RCC_CFGR_SW;
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <Clock_Init+0x98>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <Clock_Init+0x98>)
 80002ec:	f023 0303 	bic.w	r3, r3, #3
 80002f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <Clock_Init+0x98>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <Clock_Init+0x98>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 80002fe:	bf00      	nop
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <Clock_Init+0x98>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f003 030c 	and.w	r3, r3, #12
 8000308:	2b08      	cmp	r3, #8
 800030a:	d1f9      	bne.n	8000300 <Clock_Init+0x80>
		;
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40023800 	.word	0x40023800
 800031c:	40007000 	.word	0x40007000
 8000320:	40023c00 	.word	0x40023c00
 8000324:	0441300c 	.word	0x0441300c

08000328 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    volatile uint32_t count = 24000 * ms;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000336:	fb02 f303 	mul.w	r3, r2, r3
 800033a:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800033c:	bf00      	nop
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	60fa      	str	r2, [r7, #12]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1fa      	bne.n	800033e <delay_ms+0x16>
    }
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
	...

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <UART2_Init>:
uint8_t Rx_Index = 0;
uint8_t Tx_Data[8];

uint8_t Data_stored[10];

void UART2_Init(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;   // Enable clocks for GPIOD and USART2
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <UART2_Init+0x64>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <UART2_Init+0x64>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <UART2_Init+0x64>)
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <UART2_Init+0x64>)
 80003aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ae:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOD->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER6_1; // Set pins PD5 and PD6 in alternate function mode for USART2
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <UART2_Init+0x68>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <UART2_Init+0x68>)
 80003b6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0] |= (0x7 << 20) | (0x7 << 24); // Setting alternate function 7 (USART2) for PD5 and PD6
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <UART2_Init+0x68>)
 80003be:	6a1b      	ldr	r3, [r3, #32]
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <UART2_Init+0x68>)
 80003c2:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 80003c6:	6213      	str	r3, [r2, #32]

	USART2->BRR = 0x683;							// Baud Rate Configuration
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <UART2_Init+0x6c>)
 80003ca:	f240 6283 	movw	r2, #1667	; 0x683
 80003ce:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Enable transmitter, receiver, and USART2 module
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <UART2_Init+0x6c>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <UART2_Init+0x6c>)
 80003d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003da:	f043 030c 	orr.w	r3, r3, #12
 80003de:	60d3      	str	r3, [r2, #12]

	USART2->CR1 |= USART_CR1_RXNEIE; // Enable interrupt on receive data register
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <UART2_Init+0x6c>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <UART2_Init+0x6c>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn);					// Enable USART2 interrupt
 80003ec:	2026      	movs	r0, #38	; 0x26
 80003ee:	f7ff ffb3 	bl	8000358 <__NVIC_EnableIRQ>
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020c00 	.word	0x40020c00
 8000400:	40004400 	.word	0x40004400

08000404 <USART2_IRQHandler>:
			;	    // Wait until transmit data register is empty
		USART2->DR = *str++;
	}
}

void USART2_IRQHandler(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) {   // If character received in USART2
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <USART2_IRQHandler+0x40>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	2b00      	cmp	r3, #0
 8000412:	d012      	beq.n	800043a <USART2_IRQHandler+0x36>
        Rx_Data[Rx_Index++] = USART2->DR; // Read the character and store in Rx_Data
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <USART2_IRQHandler+0x40>)
 8000416:	6859      	ldr	r1, [r3, #4]
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <USART2_IRQHandler+0x44>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	1c5a      	adds	r2, r3, #1
 800041e:	b2d0      	uxtb	r0, r2
 8000420:	4a09      	ldr	r2, [pc, #36]	; (8000448 <USART2_IRQHandler+0x44>)
 8000422:	7010      	strb	r0, [r2, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	b2c9      	uxtb	r1, r1
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <USART2_IRQHandler+0x48>)
 800042a:	5499      	strb	r1, [r3, r2]

        if (Rx_Index >= 32) {
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <USART2_IRQHandler+0x44>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b1f      	cmp	r3, #31
 8000432:	d902      	bls.n	800043a <USART2_IRQHandler+0x36>
            Rx_Index = 0; // Reset index if buffer is full
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <USART2_IRQHandler+0x44>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40004400 	.word	0x40004400
 8000448:	200000b4 	.word	0x200000b4
 800044c:	20000094 	.word	0x20000094

08000450 <UART2_SendData>:

void UART2_SendData(uint8_t *data, uint8_t length) {
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	// Set PD3 before sending data
	GPIOD->MODER |= GPIO_MODER_MODER3_0;  // Set PD3 as output
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <UART2_SendData+0x70>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <UART2_SendData+0x70>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6013      	str	r3, [r2, #0]
	GPIOD->BSRR = GPIO_BSRR_BS_3;         // Set PD3 high
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <UART2_SendData+0x70>)
 800046a:	2208      	movs	r2, #8
 800046c:	619a      	str	r2, [r3, #24]
	for (uint8_t i = 0; i < length; i++) {
 800046e:	2300      	movs	r3, #0
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	e00f      	b.n	8000494 <UART2_SendData+0x44>
		while (!(USART2->SR & USART_SR_TXE))
 8000474:	bf00      	nop
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <UART2_SendData+0x74>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <UART2_SendData+0x26>
			; // Wait until transmit data register is empty
		USART2->DR = data[i];
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4413      	add	r3, r2
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <UART2_SendData+0x74>)
 800048c:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < length; i++) {
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	3301      	adds	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	7bfa      	ldrb	r2, [r7, #15]
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	429a      	cmp	r2, r3
 800049a:	d3eb      	bcc.n	8000474 <UART2_SendData+0x24>
	}
	while (!(USART2->SR & USART_SR_TC))
 800049c:	bf00      	nop
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <UART2_SendData+0x74>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f9      	beq.n	800049e <UART2_SendData+0x4e>
		; // Wait for transmission to complete

	// Reset PD3 after sending data
	GPIOD->BSRR = GPIO_BSRR_BR_3;         // Set PD3 low
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <UART2_SendData+0x70>)
 80004ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004b0:	619a      	str	r2, [r3, #24]
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40004400 	.word	0x40004400

080004c8 <UART2_ReceiveData>:

void UART2_ReceiveData(uint8_t *data, uint8_t length) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; i++) {
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	e00e      	b.n	80004f8 <UART2_ReceiveData+0x30>
        if (i < Rx_Index) {
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <UART2_ReceiveData+0x50>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	7bfa      	ldrb	r2, [r7, #15]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d20e      	bcs.n	8000502 <UART2_ReceiveData+0x3a>
            data[i] = Rx_Data[i];
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	440b      	add	r3, r1
 80004ec:	490b      	ldr	r1, [pc, #44]	; (800051c <UART2_ReceiveData+0x54>)
 80004ee:	5c8a      	ldrb	r2, [r1, r2]
 80004f0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3301      	adds	r3, #1
 80004f6:	73fb      	strb	r3, [r7, #15]
 80004f8:	7bfa      	ldrb	r2, [r7, #15]
 80004fa:	78fb      	ldrb	r3, [r7, #3]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3ec      	bcc.n	80004da <UART2_ReceiveData+0x12>
 8000500:	e000      	b.n	8000504 <UART2_ReceiveData+0x3c>
        } else {
            break;
 8000502:	bf00      	nop
        }
    }
    Rx_Index = 0;
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <UART2_ReceiveData+0x50>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000b4 	.word	0x200000b4
 800051c:	20000094 	.word	0x20000094

08000520 <processElement>:

void processElement(uint8_t *element, const char *elementName) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b08c      	sub	sp, #48	; 0x30
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
    uint8_t response[32];

    UART2_SendData(element, sizeof(element));
 800052a:	2104      	movs	r1, #4
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff8f 	bl	8000450 <UART2_SendData>
    delay_ms(50);
 8000532:	2032      	movs	r0, #50	; 0x32
 8000534:	f7ff fef8 	bl	8000328 <delay_ms>
    UART2_ReceiveData(response, sizeof(response));
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2120      	movs	r1, #32
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ffc2 	bl	80004c8 <UART2_ReceiveData>

    if (response[1] == 0x03) {
 8000544:	7b7b      	ldrb	r3, [r7, #13]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d10d      	bne.n	8000566 <processElement+0x46>
        uint16_t element_value = (response[3] << 8) | response[4];
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	7c3b      	ldrb	r3, [r7, #16]
 8000552:	b21b      	sxth	r3, r3
 8000554:	4313      	orrs	r3, r2
 8000556:	b21b      	sxth	r3, r3
 8000558:	85fb      	strh	r3, [r7, #46]	; 0x2e
        printf("%s Value: 0x%04X\n", elementName, element_value);
 800055a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800055c:	461a      	mov	r2, r3
 800055e:	6839      	ldr	r1, [r7, #0]
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <processElement+0x54>)
 8000562:	f001 ffff 	bl	8002564 <iprintf>
    }

    // Reset Rx_Index for next reading
    Rx_Index = 0;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <processElement+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	3730      	adds	r7, #48	; 0x30
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	08003110 	.word	0x08003110
 8000578:	200000b4 	.word	0x200000b4

0800057c <main>:
#include "stm32f4xx.h"
#include <stdio.h>
#include "Clock_config.h"
#include "UART_Data.h"

int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    Clock_Init();
 8000580:	f7ff fe7e 	bl	8000280 <Clock_Init>
    UART2_Init();
 8000584:	f7ff ff06 	bl	8000394 <UART2_Init>

    processElement((uint8_t*)nitro, "Nitrogen");
 8000588:	4906      	ldr	r1, [pc, #24]	; (80005a4 <main+0x28>)
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <main+0x2c>)
 800058c:	f7ff ffc8 	bl	8000520 <processElement>
    processElement((uint8_t*)phos, "Phosphorus");
 8000590:	4906      	ldr	r1, [pc, #24]	; (80005ac <main+0x30>)
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <main+0x34>)
 8000594:	f7ff ffc4 	bl	8000520 <processElement>
    processElement((uint8_t*)pota, "Potassium");
 8000598:	4906      	ldr	r1, [pc, #24]	; (80005b4 <main+0x38>)
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0x3c>)
 800059c:	f7ff ffc0 	bl	8000520 <processElement>

    while (1) {
 80005a0:	e7fe      	b.n	80005a0 <main+0x24>
 80005a2:	bf00      	nop
 80005a4:	08003124 	.word	0x08003124
 80005a8:	20000000 	.word	0x20000000
 80005ac:	08003130 	.word	0x08003130
 80005b0:	20000008 	.word	0x20000008
 80005b4:	0800313c 	.word	0x0800313c
 80005b8:	20000010 	.word	0x20000010

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler+0x4>

080005ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler+0x4>

080005da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000608:	f000 f8ec 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <OTG_FS_IRQHandler+0x10>)
 8000616:	f000 f8f9 	bl	800080c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000c0 	.word	0x200000c0

08000624 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e00a      	b.n	800064c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000636:	f3af 8000 	nop.w
 800063a:	4601      	mov	r1, r0
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	60ba      	str	r2, [r7, #8]
 8000642:	b2ca      	uxtb	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf0      	blt.n	8000636 <_read+0x12>
  }

  return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	e009      	b.n	8000684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf1      	blt.n	8000670 <_write+0x12>
  }
  return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_close>:

int _close(int file)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006be:	605a      	str	r2, [r3, #4]
  return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_isatty>:

int _isatty(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <_sbrk+0x5c>)
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <_sbrk+0x60>)
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <_sbrk+0x64>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <_sbrk+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	429a      	cmp	r2, r3
 800072e:	d207      	bcs.n	8000740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000730:	f001 ffcc 	bl	80026cc <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	e009      	b.n	8000754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <_sbrk+0x64>)
 8000750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20020000 	.word	0x20020000
 8000760:	00000400 	.word	0x00000400
 8000764:	200000b8 	.word	0x200000b8
 8000768:	20000510 	.word	0x20000510

0800076c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x20>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <SystemInit+0x20>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000796:	490e      	ldr	r1, [pc, #56]	; (80007d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007ac:	4c0b      	ldr	r4, [pc, #44]	; (80007dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ba:	f7ff ffd7 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f001 ff8b 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c2:	f7ff fedb 	bl	800057c <main>
  bx  lr    
 80007c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007d4:	08003184 	.word	0x08003184
  ldr r2, =_sbss
 80007d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007dc:	20000510 	.word	0x20000510

080007e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC_IRQHandler>
	...

080007e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000018 	.word	0x20000018
 8000808:	200000bc 	.word	0x200000bc

0800080c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fa0f 	bl	8001c46 <USB_GetMode>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 80f6 	bne.w	8000a1c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f9f3 	bl	8001c20 <USB_ReadInterrupts>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	f000 80ec 	beq.w	8000a1a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f9ea 	bl	8001c20 <USB_ReadInterrupts>
 800084c:	4603      	mov	r3, r0
 800084e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000856:	d104      	bne.n	8000862 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000860:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f9da 	bl	8001c20 <USB_ReadInterrupts>
 800086c:	4603      	mov	r3, r0
 800086e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000876:	d104      	bne.n	8000882 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000880:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f001 f9ca 	bl	8001c20 <USB_ReadInterrupts>
 800088c:	4603      	mov	r3, r0
 800088e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000896:	d104      	bne.n	80008a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f9ba 	bl	8001c20 <USB_ReadInterrupts>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d103      	bne.n	80008be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2202      	movs	r2, #2
 80008bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f9ac 	bl	8001c20 <USB_ReadInterrupts>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008d2:	d11c      	bne.n	800090e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10f      	bne.n	800090e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80008ee:	2110      	movs	r1, #16
 80008f0:	6938      	ldr	r0, [r7, #16]
 80008f2:	f001 f8d9 	bl	8001aa8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80008f6:	6938      	ldr	r0, [r7, #16]
 80008f8:	f001 f90a 	bl	8001b10 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f9ad 	bl	8001c62 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f001 fc3e 	bl	800218a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f984 	bl	8001c20 <USB_ReadInterrupts>
 8000918:	4603      	mov	r3, r0
 800091a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800091e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000922:	d102      	bne.n	800092a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f001 f829 	bl	800197c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f001 f976 	bl	8001c20 <USB_ReadInterrupts>
 8000934:	4603      	mov	r3, r0
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	2b08      	cmp	r3, #8
 800093c:	d106      	bne.n	800094c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f001 fc07 	bl	8002152 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2208      	movs	r2, #8
 800094a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f965 	bl	8001c20 <USB_ReadInterrupts>
 8000956:	4603      	mov	r3, r0
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	2b10      	cmp	r3, #16
 800095e:	d101      	bne.n	8000964 <HAL_HCD_IRQHandler+0x158>
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <HAL_HCD_IRQHandler+0x15a>
 8000964:	2300      	movs	r3, #0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d012      	beq.n	8000990 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	699a      	ldr	r2, [r3, #24]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0210 	bic.w	r2, r2, #16
 8000978:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 ff2c 	bl	80017d8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	699a      	ldr	r2, [r3, #24]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f042 0210 	orr.w	r2, r2, #16
 800098e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f001 f943 	bl	8001c20 <USB_ReadInterrupts>
 800099a:	4603      	mov	r3, r0
 800099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80009a4:	d13a      	bne.n	8000a1c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f993 	bl	8001cd6 <USB_HC_ReadInterrupt>
 80009b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e025      	b.n	8000a04 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	fa22 f303 	lsr.w	r3, r2, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d018      	beq.n	80009fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	015a      	lsls	r2, r3, #5
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009e2:	d106      	bne.n	80009f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f836 	bl	8000a5c <HCD_HC_IN_IRQHandler>
 80009f0:	e005      	b.n	80009fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 fb84 	bl	8001106 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3d4      	bcc.n	80009b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	e000      	b.n	8000a1c <HAL_HCD_IRQHandler+0x210>
      return;
 8000a1a:	bf00      	nop
    }
  }
}
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d101      	bne.n	8000a38 <HAL_HCD_Stop+0x16>
 8000a34:	2302      	movs	r3, #2
 8000a36:	e00d      	b.n	8000a54 <HAL_HCD_Stop+0x32>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fa53 	bl	8001ef0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d11a      	bne.n	8000ac2 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	015a      	lsls	r2, r3, #5
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4413      	add	r3, r2
 8000a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	212c      	movs	r1, #44	; 0x2c
 8000aa4:	fb01 f303 	mul.w	r3, r1, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3361      	adds	r3, #97	; 0x61
 8000aac:	2206      	movs	r2, #6
 8000aae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 f91c 	bl	8001cf8 <USB_HC_Halt>
 8000ac0:	e0af      	b.n	8000c22 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	015a      	lsls	r2, r3, #5
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4413      	add	r3, r2
 8000aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad8:	d11b      	bne.n	8000b12 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	015a      	lsls	r2, r3, #5
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	212c      	movs	r1, #44	; 0x2c
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	3361      	adds	r3, #97	; 0x61
 8000afc:	2207      	movs	r2, #7
 8000afe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f8f4 	bl	8001cf8 <USB_HC_Halt>
 8000b10:	e087      	b.n	8000c22 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	015a      	lsls	r2, r3, #5
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4413      	add	r3, r2
 8000b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	d109      	bne.n	8000b3c <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	015a      	lsls	r2, r3, #5
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4413      	add	r3, r2
 8000b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b34:	461a      	mov	r2, r3
 8000b36:	2320      	movs	r3, #32
 8000b38:	6093      	str	r3, [r2, #8]
 8000b3a:	e072      	b.n	8000c22 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	015a      	lsls	r2, r3, #5
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4413      	add	r3, r2
 8000b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d11a      	bne.n	8000b88 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	015a      	lsls	r2, r3, #5
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4413      	add	r3, r2
 8000b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2308      	movs	r3, #8
 8000b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	212c      	movs	r1, #44	; 0x2c
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	3361      	adds	r3, #97	; 0x61
 8000b72:	2205      	movs	r2, #5
 8000b74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f8b9 	bl	8001cf8 <USB_HC_Halt>
 8000b86:	e04c      	b.n	8000c22 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	015a      	lsls	r2, r3, #5
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4413      	add	r3, r2
 8000b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9e:	d11b      	bne.n	8000bd8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	015a      	lsls	r2, r3, #5
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000bac:	461a      	mov	r2, r3
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	212c      	movs	r1, #44	; 0x2c
 8000bba:	fb01 f303 	mul.w	r3, r1, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3361      	adds	r3, #97	; 0x61
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f891 	bl	8001cf8 <USB_HC_Halt>
 8000bd6:	e024      	b.n	8000c22 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b80      	cmp	r3, #128	; 0x80
 8000bec:	d119      	bne.n	8000c22 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	015a      	lsls	r2, r3, #5
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	212c      	movs	r1, #44	; 0x2c
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3361      	adds	r3, #97	; 0x61
 8000c0e:	2206      	movs	r2, #6
 8000c10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 f86b 	bl	8001cf8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	015a      	lsls	r2, r3, #5
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4413      	add	r3, r2
 8000c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c38:	d112      	bne.n	8000c60 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 f857 	bl	8001cf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	015a      	lsls	r2, r3, #5
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4413      	add	r3, r2
 8000c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c56:	461a      	mov	r2, r3
 8000c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000c5e:	e24e      	b.n	80010fe <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	015a      	lsls	r2, r3, #5
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4413      	add	r3, r2
 8000c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	f040 80df 	bne.w	8000e36 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d019      	beq.n	8000cb4 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	212c      	movs	r1, #44	; 0x2c
 8000c86:	fb01 f303 	mul.w	r3, r1, r3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3348      	adds	r3, #72	; 0x48
 8000c8e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	0159      	lsls	r1, r3, #5
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	440b      	add	r3, r1
 8000c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000ca2:	1ad2      	subs	r2, r2, r3
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	202c      	movs	r0, #44	; 0x2c
 8000caa:	fb00 f303 	mul.w	r3, r0, r3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3350      	adds	r3, #80	; 0x50
 8000cb2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	212c      	movs	r1, #44	; 0x2c
 8000cba:	fb01 f303 	mul.w	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3361      	adds	r3, #97	; 0x61
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	212c      	movs	r1, #44	; 0x2c
 8000ccc:	fb01 f303 	mul.w	r3, r1, r3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	335c      	adds	r3, #92	; 0x5c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	015a      	lsls	r2, r3, #5
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	212c      	movs	r1, #44	; 0x2c
 8000cf0:	fb01 f303 	mul.w	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	333f      	adds	r3, #63	; 0x3f
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d009      	beq.n	8000d12 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	212c      	movs	r1, #44	; 0x2c
 8000d04:	fb01 f303 	mul.w	r3, r1, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	333f      	adds	r3, #63	; 0x3f
 8000d0c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d111      	bne.n	8000d36 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 ffeb 	bl	8001cf8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	015a      	lsls	r2, r3, #5
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4413      	add	r3, r2
 8000d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2310      	movs	r3, #16
 8000d32:	6093      	str	r3, [r2, #8]
 8000d34:	e03a      	b.n	8000dac <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	212c      	movs	r1, #44	; 0x2c
 8000d3c:	fb01 f303 	mul.w	r3, r1, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	333f      	adds	r3, #63	; 0x3f
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d009      	beq.n	8000d5e <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	212c      	movs	r1, #44	; 0x2c
 8000d50:	fb01 f303 	mul.w	r3, r1, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	333f      	adds	r3, #63	; 0x3f
 8000d58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d126      	bne.n	8000dac <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4413      	add	r3, r2
 8000d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	0151      	lsls	r1, r2, #5
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	440a      	add	r2, r1
 8000d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000d78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d7c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	212c      	movs	r1, #44	; 0x2c
 8000d84:	fb01 f303 	mul.w	r3, r1, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	3360      	adds	r3, #96	; 0x60
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	b2d9      	uxtb	r1, r3
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	202c      	movs	r0, #44	; 0x2c
 8000d9a:	fb00 f303 	mul.w	r3, r0, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	3360      	adds	r3, #96	; 0x60
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f001 f9fd 	bl	80021a6 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d12b      	bne.n	8000e0c <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	212c      	movs	r1, #44	; 0x2c
 8000dba:	fb01 f303 	mul.w	r3, r1, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3348      	adds	r3, #72	; 0x48
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	202c      	movs	r0, #44	; 0x2c
 8000dca:	fb00 f202 	mul.w	r2, r0, r2
 8000dce:	440a      	add	r2, r1
 8000dd0:	3240      	adds	r2, #64	; 0x40
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 818e 	beq.w	80010fe <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	212c      	movs	r1, #44	; 0x2c
 8000de8:	fb01 f303 	mul.w	r3, r1, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	3354      	adds	r3, #84	; 0x54
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2d8      	uxtb	r0, r3
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	212c      	movs	r1, #44	; 0x2c
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	3354      	adds	r3, #84	; 0x54
 8000e06:	4602      	mov	r2, r0
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	e178      	b.n	80010fe <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	212c      	movs	r1, #44	; 0x2c
 8000e12:	fb01 f303 	mul.w	r3, r1, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	3354      	adds	r3, #84	; 0x54
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f083 0301 	eor.w	r3, r3, #1
 8000e20:	b2d8      	uxtb	r0, r3
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	212c      	movs	r1, #44	; 0x2c
 8000e28:	fb01 f303 	mul.w	r3, r1, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3354      	adds	r3, #84	; 0x54
 8000e30:	4602      	mov	r2, r0
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	e163      	b.n	80010fe <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	015a      	lsls	r2, r3, #5
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	f040 80f6 	bne.w	800103a <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	212c      	movs	r1, #44	; 0x2c
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	3361      	adds	r3, #97	; 0x61
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d109      	bne.n	8000e76 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	212c      	movs	r1, #44	; 0x2c
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3360      	adds	r3, #96	; 0x60
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e0c9      	b.n	800100a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	212c      	movs	r1, #44	; 0x2c
 8000e7c:	fb01 f303 	mul.w	r3, r1, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	3361      	adds	r3, #97	; 0x61
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d109      	bne.n	8000e9e <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	212c      	movs	r1, #44	; 0x2c
 8000e90:	fb01 f303 	mul.w	r3, r1, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	3360      	adds	r3, #96	; 0x60
 8000e98:	2205      	movs	r2, #5
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e0b5      	b.n	800100a <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	212c      	movs	r1, #44	; 0x2c
 8000ea4:	fb01 f303 	mul.w	r3, r1, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3361      	adds	r3, #97	; 0x61
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d009      	beq.n	8000ec6 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	212c      	movs	r1, #44	; 0x2c
 8000eb8:	fb01 f303 	mul.w	r3, r1, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3361      	adds	r3, #97	; 0x61
 8000ec0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d150      	bne.n	8000f68 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	212c      	movs	r1, #44	; 0x2c
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	335c      	adds	r3, #92	; 0x5c
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	202c      	movs	r0, #44	; 0x2c
 8000ede:	fb00 f303 	mul.w	r3, r0, r3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	335c      	adds	r3, #92	; 0x5c
 8000ee6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	212c      	movs	r1, #44	; 0x2c
 8000eee:	fb01 f303 	mul.w	r3, r1, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	335c      	adds	r3, #92	; 0x5c
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d912      	bls.n	8000f22 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	212c      	movs	r1, #44	; 0x2c
 8000f02:	fb01 f303 	mul.w	r3, r1, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	335c      	adds	r3, #92	; 0x5c
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	212c      	movs	r1, #44	; 0x2c
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	3360      	adds	r3, #96	; 0x60
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000f20:	e073      	b.n	800100a <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	212c      	movs	r1, #44	; 0x2c
 8000f28:	fb01 f303 	mul.w	r3, r1, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3360      	adds	r3, #96	; 0x60
 8000f30:	2202      	movs	r2, #2
 8000f32:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	015a      	lsls	r2, r3, #5
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f4a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f52:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f60:	461a      	mov	r2, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000f66:	e050      	b.n	800100a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	212c      	movs	r1, #44	; 0x2c
 8000f6e:	fb01 f303 	mul.w	r3, r1, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	3361      	adds	r3, #97	; 0x61
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d122      	bne.n	8000fc2 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	212c      	movs	r1, #44	; 0x2c
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	3360      	adds	r3, #96	; 0x60
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	015a      	lsls	r2, r3, #5
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4413      	add	r3, r2
 8000f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000fa4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	015a      	lsls	r2, r3, #5
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e023      	b.n	800100a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	212c      	movs	r1, #44	; 0x2c
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	3361      	adds	r3, #97	; 0x61
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	d119      	bne.n	800100a <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	212c      	movs	r1, #44	; 0x2c
 8000fdc:	fb01 f303 	mul.w	r3, r1, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	335c      	adds	r3, #92	; 0x5c
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	202c      	movs	r0, #44	; 0x2c
 8000fee:	fb00 f303 	mul.w	r3, r0, r3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	335c      	adds	r3, #92	; 0x5c
 8000ff6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	212c      	movs	r1, #44	; 0x2c
 8000ffe:	fb01 f303 	mul.w	r3, r1, r3
 8001002:	4413      	add	r3, r2
 8001004:	3360      	adds	r3, #96	; 0x60
 8001006:	2204      	movs	r2, #4
 8001008:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	015a      	lsls	r2, r3, #5
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4413      	add	r3, r2
 8001012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001016:	461a      	mov	r2, r3
 8001018:	2302      	movs	r3, #2
 800101a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	b2d9      	uxtb	r1, r3
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	202c      	movs	r0, #44	; 0x2c
 8001026:	fb00 f303 	mul.w	r3, r0, r3
 800102a:	4413      	add	r3, r2
 800102c:	3360      	adds	r3, #96	; 0x60
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f001 f8b7 	bl	80021a6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001038:	e061      	b.n	80010fe <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	015a      	lsls	r2, r3, #5
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4413      	add	r3, r2
 8001042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	2b10      	cmp	r3, #16
 800104e:	d156      	bne.n	80010fe <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	212c      	movs	r1, #44	; 0x2c
 8001056:	fb01 f303 	mul.w	r3, r1, r3
 800105a:	4413      	add	r3, r2
 800105c:	333f      	adds	r3, #63	; 0x3f
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d111      	bne.n	8001088 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	212c      	movs	r1, #44	; 0x2c
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4413      	add	r3, r2
 8001070:	335c      	adds	r3, #92	; 0x5c
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fe39 	bl	8001cf8 <USB_HC_Halt>
 8001086:	e031      	b.n	80010ec <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	212c      	movs	r1, #44	; 0x2c
 800108e:	fb01 f303 	mul.w	r3, r1, r3
 8001092:	4413      	add	r3, r2
 8001094:	333f      	adds	r3, #63	; 0x3f
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	212c      	movs	r1, #44	; 0x2c
 80010a2:	fb01 f303 	mul.w	r3, r1, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	333f      	adds	r3, #63	; 0x3f
 80010aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d11d      	bne.n	80010ec <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	212c      	movs	r1, #44	; 0x2c
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	335c      	adds	r3, #92	; 0x5c
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d110      	bne.n	80010ec <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	212c      	movs	r1, #44	; 0x2c
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	3361      	adds	r3, #97	; 0x61
 80010d8:	2203      	movs	r2, #3
 80010da:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fe06 	bl	8001cf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f8:	461a      	mov	r2, r3
 80010fa:	2310      	movs	r3, #16
 80010fc:	6093      	str	r3, [r2, #8]
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b088      	sub	sp, #32
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	015a      	lsls	r2, r3, #5
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4413      	add	r3, r2
 8001128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b04      	cmp	r3, #4
 8001134:	d11a      	bne.n	800116c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	015a      	lsls	r2, r3, #5
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4413      	add	r3, r2
 800113e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001142:	461a      	mov	r2, r3
 8001144:	2304      	movs	r3, #4
 8001146:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	212c      	movs	r1, #44	; 0x2c
 800114e:	fb01 f303 	mul.w	r3, r1, r3
 8001152:	4413      	add	r3, r2
 8001154:	3361      	adds	r3, #97	; 0x61
 8001156:	2206      	movs	r2, #6
 8001158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fdc7 	bl	8001cf8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800116a:	e331      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	015a      	lsls	r2, r3, #5
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4413      	add	r3, r2
 8001174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0320 	and.w	r3, r3, #32
 800117e:	2b20      	cmp	r3, #32
 8001180:	d12e      	bne.n	80011e0 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	015a      	lsls	r2, r3, #5
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4413      	add	r3, r2
 800118a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800118e:	461a      	mov	r2, r3
 8001190:	2320      	movs	r3, #32
 8001192:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	212c      	movs	r1, #44	; 0x2c
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	333d      	adds	r3, #61	; 0x3d
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f040 8313 	bne.w	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	212c      	movs	r1, #44	; 0x2c
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	333d      	adds	r3, #61	; 0x3d
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	212c      	movs	r1, #44	; 0x2c
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	3360      	adds	r3, #96	; 0x60
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fd8d 	bl	8001cf8 <USB_HC_Halt>
}
 80011de:	e2f7      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f6:	d112      	bne.n	800121e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	015a      	lsls	r2, r3, #5
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	4413      	add	r3, r2
 8001200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001204:	461a      	mov	r2, r3
 8001206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800120a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fd6e 	bl	8001cf8 <USB_HC_Halt>
}
 800121c:	e2d8      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	015a      	lsls	r2, r3, #5
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4413      	add	r3, r2
 8001226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	d140      	bne.n	80012b6 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	212c      	movs	r1, #44	; 0x2c
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	4413      	add	r3, r2
 8001240:	335c      	adds	r3, #92	; 0x5c
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	015a      	lsls	r2, r3, #5
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4413      	add	r3, r2
 800124e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b40      	cmp	r3, #64	; 0x40
 800125a:	d111      	bne.n	8001280 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	212c      	movs	r1, #44	; 0x2c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	333d      	adds	r3, #61	; 0x3d
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	015a      	lsls	r2, r3, #5
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4413      	add	r3, r2
 8001276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800127a:	461a      	mov	r2, r3
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4413      	add	r3, r2
 8001288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800128c:	461a      	mov	r2, r3
 800128e:	2301      	movs	r3, #1
 8001290:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	212c      	movs	r1, #44	; 0x2c
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	3361      	adds	r3, #97	; 0x61
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fd22 	bl	8001cf8 <USB_HC_Halt>
}
 80012b4:	e28c      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c8:	2b40      	cmp	r3, #64	; 0x40
 80012ca:	d12c      	bne.n	8001326 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	212c      	movs	r1, #44	; 0x2c
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	3361      	adds	r3, #97	; 0x61
 80012da:	2204      	movs	r2, #4
 80012dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	212c      	movs	r1, #44	; 0x2c
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	333d      	adds	r3, #61	; 0x3d
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	335c      	adds	r3, #92	; 0x5c
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fcf3 	bl	8001cf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4413      	add	r3, r2
 800131a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800131e:	461a      	mov	r2, r3
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	6093      	str	r3, [r2, #8]
}
 8001324:	e254      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	015a      	lsls	r2, r3, #5
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4413      	add	r3, r2
 800132e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b08      	cmp	r3, #8
 800133a:	d11a      	bne.n	8001372 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	4413      	add	r3, r2
 8001344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001348:	461a      	mov	r2, r3
 800134a:	2308      	movs	r3, #8
 800134c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	212c      	movs	r1, #44	; 0x2c
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	4413      	add	r3, r2
 800135a:	3361      	adds	r3, #97	; 0x61
 800135c:	2205      	movs	r2, #5
 800135e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fcc4 	bl	8001cf8 <USB_HC_Halt>
}
 8001370:	e22e      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	015a      	lsls	r2, r3, #5
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4413      	add	r3, r2
 800137a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b10      	cmp	r3, #16
 8001386:	d140      	bne.n	800140a <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	212c      	movs	r1, #44	; 0x2c
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	335c      	adds	r3, #92	; 0x5c
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	212c      	movs	r1, #44	; 0x2c
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	3361      	adds	r3, #97	; 0x61
 80013a8:	2203      	movs	r2, #3
 80013aa:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	212c      	movs	r1, #44	; 0x2c
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	333d      	adds	r3, #61	; 0x3d
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d112      	bne.n	80013e6 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	333c      	adds	r3, #60	; 0x3c
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d108      	bne.n	80013e6 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	333d      	adds	r3, #61	; 0x3d
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fc81 	bl	8001cf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	015a      	lsls	r2, r3, #5
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001402:	461a      	mov	r2, r3
 8001404:	2310      	movs	r3, #16
 8001406:	6093      	str	r3, [r2, #8]
}
 8001408:	e1e2      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4413      	add	r3, r2
 8001412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	2b80      	cmp	r3, #128	; 0x80
 800141e:	d164      	bne.n	80014ea <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d111      	bne.n	800144c <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	212c      	movs	r1, #44	; 0x2c
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	3361      	adds	r3, #97	; 0x61
 8001436:	2206      	movs	r2, #6
 8001438:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fc57 	bl	8001cf8 <USB_HC_Halt>
 800144a:	e044      	b.n	80014d6 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	212c      	movs	r1, #44	; 0x2c
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	4413      	add	r3, r2
 8001458:	335c      	adds	r3, #92	; 0x5c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	202c      	movs	r0, #44	; 0x2c
 8001464:	fb00 f303 	mul.w	r3, r0, r3
 8001468:	440b      	add	r3, r1
 800146a:	335c      	adds	r3, #92	; 0x5c
 800146c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	212c      	movs	r1, #44	; 0x2c
 8001474:	fb01 f303 	mul.w	r3, r1, r3
 8001478:	4413      	add	r3, r2
 800147a:	335c      	adds	r3, #92	; 0x5c
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d920      	bls.n	80014c4 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	212c      	movs	r1, #44	; 0x2c
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	335c      	adds	r3, #92	; 0x5c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	212c      	movs	r1, #44	; 0x2c
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	3360      	adds	r3, #96	; 0x60
 80014a2:	2204      	movs	r2, #4
 80014a4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	202c      	movs	r0, #44	; 0x2c
 80014b0:	fb00 f303 	mul.w	r3, r0, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	3360      	adds	r3, #96	; 0x60
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fe72 	bl	80021a6 <HAL_HCD_HC_NotifyURBChange_Callback>
 80014c2:	e008      	b.n	80014d6 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3360      	adds	r3, #96	; 0x60
 80014d2:	2202      	movs	r2, #2
 80014d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	461a      	mov	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	6093      	str	r3, [r2, #8]
}
 80014e8:	e172      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001500:	d11b      	bne.n	800153a <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3361      	adds	r3, #97	; 0x61
 8001510:	2208      	movs	r2, #8
 8001512:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fbea 	bl	8001cf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	4413      	add	r3, r2
 800152c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001536:	6093      	str	r3, [r2, #8]
}
 8001538:	e14a      	b.n	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4413      	add	r3, r2
 8001542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b02      	cmp	r3, #2
 800154e:	f040 813f 	bne.w	80017d0 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	3361      	adds	r3, #97	; 0x61
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d17d      	bne.n	8001662 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	212c      	movs	r1, #44	; 0x2c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	3360      	adds	r3, #96	; 0x60
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	212c      	movs	r1, #44	; 0x2c
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	333f      	adds	r3, #63	; 0x3f
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d00a      	beq.n	80015a2 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	212c      	movs	r1, #44	; 0x2c
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	333f      	adds	r3, #63	; 0x3f
 800159a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800159c:	2b03      	cmp	r3, #3
 800159e:	f040 8100 	bne.w	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d113      	bne.n	80015d2 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	3355      	adds	r3, #85	; 0x55
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2d8      	uxtb	r0, r3
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	212c      	movs	r1, #44	; 0x2c
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	3355      	adds	r3, #85	; 0x55
 80015ce:	4602      	mov	r2, r0
 80015d0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f040 80e3 	bne.w	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	212c      	movs	r1, #44	; 0x2c
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	334c      	adds	r3, #76	; 0x4c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80d8 	beq.w	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	334c      	adds	r3, #76	; 0x4c
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	202c      	movs	r0, #44	; 0x2c
 8001608:	fb00 f202 	mul.w	r2, r0, r2
 800160c:	440a      	add	r2, r1
 800160e:	3240      	adds	r2, #64	; 0x40
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	4413      	add	r3, r2
 8001614:	3b01      	subs	r3, #1
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	202c      	movs	r0, #44	; 0x2c
 800161c:	fb00 f202 	mul.w	r2, r0, r2
 8001620:	440a      	add	r2, r1
 8001622:	3240      	adds	r2, #64	; 0x40
 8001624:	8812      	ldrh	r2, [r2, #0]
 8001626:	fbb3 f3f2 	udiv	r3, r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80b5 	beq.w	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	3355      	adds	r3, #85	; 0x55
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	212c      	movs	r1, #44	; 0x2c
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	3355      	adds	r3, #85	; 0x55
 800165c:	4602      	mov	r2, r0
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e09f      	b.n	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	212c      	movs	r1, #44	; 0x2c
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	3361      	adds	r3, #97	; 0x61
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d109      	bne.n	800168a <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	212c      	movs	r1, #44	; 0x2c
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	3360      	adds	r3, #96	; 0x60
 8001684:	2202      	movs	r2, #2
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e08b      	b.n	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	212c      	movs	r1, #44	; 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	3361      	adds	r3, #97	; 0x61
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d109      	bne.n	80016b2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	3360      	adds	r3, #96	; 0x60
 80016ac:	2202      	movs	r2, #2
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e077      	b.n	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3361      	adds	r3, #97	; 0x61
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	d109      	bne.n	80016da <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	212c      	movs	r1, #44	; 0x2c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	3360      	adds	r3, #96	; 0x60
 80016d4:	2205      	movs	r2, #5
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e063      	b.n	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3361      	adds	r3, #97	; 0x61
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d009      	beq.n	8001702 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3361      	adds	r3, #97	; 0x61
 80016fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d14f      	bne.n	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	335c      	adds	r3, #92	; 0x5c
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	202c      	movs	r0, #44	; 0x2c
 800171a:	fb00 f303 	mul.w	r3, r0, r3
 800171e:	440b      	add	r3, r1
 8001720:	335c      	adds	r3, #92	; 0x5c
 8001722:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	335c      	adds	r3, #92	; 0x5c
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d912      	bls.n	800175e <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	335c      	adds	r3, #92	; 0x5c
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3360      	adds	r3, #96	; 0x60
 8001758:	2204      	movs	r2, #4
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e021      	b.n	80017a2 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3360      	adds	r3, #96	; 0x60
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	4413      	add	r3, r2
 8001778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001786:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800178e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4413      	add	r3, r2
 8001798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179c:	461a      	mov	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ae:	461a      	mov	r2, r3
 80017b0:	2302      	movs	r3, #2
 80017b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	b2d9      	uxtb	r1, r3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	202c      	movs	r0, #44	; 0x2c
 80017be:	fb00 f303 	mul.w	r3, r0, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3360      	adds	r3, #96	; 0x60
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fceb 	bl	80021a6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	0c5b      	lsrs	r3, r3, #17
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800180c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d004      	beq.n	800181e <HCD_RXQLVL_IRQHandler+0x46>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b05      	cmp	r3, #5
 8001818:	f000 80a9 	beq.w	800196e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800181c:	e0aa      	b.n	8001974 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a6 	beq.w	8001972 <HCD_RXQLVL_IRQHandler+0x19a>
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	212c      	movs	r1, #44	; 0x2c
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	3344      	adds	r3, #68	; 0x44
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 809b 	beq.w	8001972 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3350      	adds	r3, #80	; 0x50
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	441a      	add	r2, r3
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	202c      	movs	r0, #44	; 0x2c
 8001856:	fb00 f303 	mul.w	r3, r0, r3
 800185a:	440b      	add	r3, r1
 800185c:	334c      	adds	r3, #76	; 0x4c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d87a      	bhi.n	800195a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3344      	adds	r3, #68	; 0x44
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	b292      	uxth	r2, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f000 f977 	bl	8001b70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3344      	adds	r3, #68	; 0x44
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	441a      	add	r2, r3
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	202c      	movs	r0, #44	; 0x2c
 800189c:	fb00 f303 	mul.w	r3, r0, r3
 80018a0:	440b      	add	r3, r1
 80018a2:	3344      	adds	r3, #68	; 0x44
 80018a4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3350      	adds	r3, #80	; 0x50
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	441a      	add	r2, r3
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	202c      	movs	r0, #44	; 0x2c
 80018c0:	fb00 f303 	mul.w	r3, r0, r3
 80018c4:	440b      	add	r3, r1
 80018c6:	3350      	adds	r3, #80	; 0x50
 80018c8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	0cdb      	lsrs	r3, r3, #19
 80018da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3340      	adds	r3, #64	; 0x40
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d13c      	bne.n	8001972 <HCD_RXQLVL_IRQHandler+0x19a>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d039      	beq.n	8001972 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	4413      	add	r3, r2
 8001906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001914:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800191c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	4413      	add	r3, r2
 8001926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	212c      	movs	r1, #44	; 0x2c
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	3354      	adds	r3, #84	; 0x54
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f083 0301 	eor.w	r3, r3, #1
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3354      	adds	r3, #84	; 0x54
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
      break;
 8001958:	e00b      	b.n	8001972 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3360      	adds	r3, #96	; 0x60
 8001968:	2204      	movs	r2, #4
 800196a:	701a      	strb	r2, [r3, #0]
      break;
 800196c:	e001      	b.n	8001972 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001972:	bf00      	nop
  }
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80019a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d10b      	bne.n	80019cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fbd5 	bl	800216e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d132      	bne.n	8001a3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d126      	bne.n	8001a36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d113      	bne.n	8001a18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80019f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019fa:	d106      	bne.n	8001a0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2102      	movs	r1, #2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f92d 	bl	8001c62 <USB_InitFSLSPClkSel>
 8001a08:	e011      	b.n	8001a2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f926 	bl	8001c62 <USB_InitFSLSPClkSel>
 8001a16:	e00a      	b.n	8001a2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a26:	461a      	mov	r2, r3
 8001a28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001a2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fbc7 	bl	80021c2 <HAL_HCD_PortEnabled_Callback>
 8001a34:	e002      	b.n	8001a3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fbd1 	bl	80021de <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d103      	bne.n	8001a4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	6013      	str	r3, [r2, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 0201 	bic.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <USB_FlushTxFifo+0x64>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e01b      	b.n	8001b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	daf2      	bge.n	8001ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	019b      	lsls	r3, r3, #6
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <USB_FlushTxFifo+0x64>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e006      	b.n	8001b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d0f0      	beq.n	8001ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	00030d40 	.word	0x00030d40

08001b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <USB_FlushRxFifo+0x5c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e018      	b.n	8001b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	daf2      	bge.n	8001b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <USB_FlushRxFifo+0x5c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e006      	b.n	8001b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d0f0      	beq.n	8001b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	00030d40 	.word	0x00030d40

08001b70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	e014      	b.n	8001bc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	601a      	str	r2, [r3, #0]
    pDest++;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	6a3a      	ldr	r2, [r7, #32]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3e6      	bcc.n	8001b9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001bce:	8bfb      	ldrh	r3, [r7, #30]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01e      	beq.n	8001c12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	461a      	mov	r2, r3
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	701a      	strb	r2, [r3, #0]
      i++;
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
      pDest++;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3301      	adds	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001c06:	8bfb      	ldrh	r3, [r7, #30]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001c0c:	8bfb      	ldrh	r3, [r7, #30]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ea      	bne.n	8001be8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	372c      	adds	r7, #44	; 0x2c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0301 	and.w	r3, r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c80:	f023 0303 	bic.w	r3, r3, #3
 8001c84:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001caa:	461a      	mov	r2, r3
 8001cac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001cb0:	6053      	str	r3, [r2, #4]
 8001cb2:	e009      	b.n	8001cc8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d106      	bne.n	8001cc8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f241 7370 	movw	r3, #6000	; 0x1770
 8001cc6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	b29b      	uxth	r3, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0fdb      	lsrs	r3, r3, #31
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d104      	bne.n	8001d52 <USB_HC_Halt+0x5a>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e0c8      	b.n	8001ee4 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <USB_HC_Halt+0x66>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d163      	bne.n	8001e26 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	0151      	lsls	r1, r2, #5
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	440a      	add	r2, r1
 8001d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80ab 	bne.w	8001ee2 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d133      	bne.n	8001e00 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	0151      	lsls	r1, r2, #5
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	440a      	add	r2, r1
 8001dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001db6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	0151      	lsls	r1, r2, #5
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	440a      	add	r2, r1
 8001dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dd6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de4:	d81d      	bhi.n	8001e22 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dfc:	d0ec      	beq.n	8001dd8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001dfe:	e070      	b.n	8001ee2 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	0151      	lsls	r1, r2, #5
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	440a      	add	r2, r1
 8001e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001e20:	e05f      	b.n	8001ee2 <USB_HC_Halt+0x1ea>
            break;
 8001e22:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001e24:	e05d      	b.n	8001ee2 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	0151      	lsls	r1, r2, #5
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	440a      	add	r2, r1
 8001e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e44:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d133      	bne.n	8001ebe <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	0151      	lsls	r1, r2, #5
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	440a      	add	r2, r1
 8001e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	0151      	lsls	r1, r2, #5
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	440a      	add	r2, r1
 8001e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e94:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea2:	d81d      	bhi.n	8001ee0 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eba:	d0ec      	beq.n	8001e96 <USB_HC_Halt+0x19e>
 8001ebc:	e011      	b.n	8001ee2 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	0151      	lsls	r1, r2, #5
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	440a      	add	r2, r1
 8001ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e000      	b.n	8001ee2 <USB_HC_Halt+0x1ea>
          break;
 8001ee0:	bf00      	nop
    }
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3724      	adds	r7, #36	; 0x24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fdbd 	bl	8001a84 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001f0a:	2110      	movs	r1, #16
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fdcb 	bl	8001aa8 <USB_FlushTxFifo>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fdf7 	bl	8001b10 <USB_FlushRxFifo>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	e01f      	b.n	8001f72 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d9dc      	bls.n	8001f32 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	e034      	b.n	8001fe8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fa4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc4:	d80c      	bhi.n	8001fe0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fdc:	d0ec      	beq.n	8001fb8 <USB_StopHost+0xc8>
 8001fde:	e000      	b.n	8001fe2 <USB_StopHost+0xf2>
        break;
 8001fe0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	d9c7      	bls.n	8001f7e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8002002:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fd2c 	bl	8001a62 <USB_EnableGlobalInt>

  return ret;
 800200a:	7ffb      	ldrb	r3, [r7, #31]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f804 	bl	8002038 <USBH_HandleSof>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b0b      	cmp	r3, #11
 8002048:	d10a      	bne.n	8002060 <USBH_HandleSof+0x28>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
  }
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002078:	bf00      	nop
}
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002094:	bf00      	nop
}
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f883 	bl	80021fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f80b 	bl	8002116 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	795b      	ldrb	r3, [r3, #5]
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f805 	bl	8002116 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80d      	bhi.n	8002144 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	33e0      	adds	r3, #224	; 0xe0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	33e0      	adds	r3, #224	; 0xe0
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff57 	bl	8002014 <USBH_LL_IncTimer>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff8f 	bl	80020a0 <USBH_LL_Connect>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff98 	bl	80020ce <USBH_LL_Disconnect>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff49 	bl	8002068 <USBH_LL_PortEnabled>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff49 	bl	8002084 <USBH_LL_PortDisabled>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fc06 	bl	8000a22 <HAL_HCD_Stop>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f807 	bl	8002230 <USBH_Get_USB_Status>
 8002222:	4603      	mov	r3, r0
 8002224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002226:	7bbb      	ldrb	r3, [r7, #14]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d817      	bhi.n	8002274 <USBH_Get_USB_Status+0x44>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <USBH_Get_USB_Status+0x1c>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002263 	.word	0x08002263
 8002254:	08002269 	.word	0x08002269
 8002258:	0800226f 	.word	0x0800226f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
    break;
 8002260:	e00b      	b.n	800227a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002262:	2302      	movs	r3, #2
 8002264:	73fb      	strb	r3, [r7, #15]
    break;
 8002266:	e008      	b.n	800227a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
    break;
 800226c:	e005      	b.n	800227a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800226e:	2302      	movs	r3, #2
 8002270:	73fb      	strb	r3, [r7, #15]
    break;
 8002272:	e002      	b.n	800227a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002274:	2302      	movs	r3, #2
 8002276:	73fb      	strb	r3, [r7, #15]
    break;
 8002278:	bf00      	nop
  }
  return usb_status;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <sbrk_aligned>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	4e0e      	ldr	r6, [pc, #56]	; (80022c4 <sbrk_aligned+0x3c>)
 800228c:	460c      	mov	r4, r1
 800228e:	6831      	ldr	r1, [r6, #0]
 8002290:	4605      	mov	r5, r0
 8002292:	b911      	cbnz	r1, 800229a <sbrk_aligned+0x12>
 8002294:	f000 f9f8 	bl	8002688 <_sbrk_r>
 8002298:	6030      	str	r0, [r6, #0]
 800229a:	4621      	mov	r1, r4
 800229c:	4628      	mov	r0, r5
 800229e:	f000 f9f3 	bl	8002688 <_sbrk_r>
 80022a2:	1c43      	adds	r3, r0, #1
 80022a4:	d00a      	beq.n	80022bc <sbrk_aligned+0x34>
 80022a6:	1cc4      	adds	r4, r0, #3
 80022a8:	f024 0403 	bic.w	r4, r4, #3
 80022ac:	42a0      	cmp	r0, r4
 80022ae:	d007      	beq.n	80022c0 <sbrk_aligned+0x38>
 80022b0:	1a21      	subs	r1, r4, r0
 80022b2:	4628      	mov	r0, r5
 80022b4:	f000 f9e8 	bl	8002688 <_sbrk_r>
 80022b8:	3001      	adds	r0, #1
 80022ba:	d101      	bne.n	80022c0 <sbrk_aligned+0x38>
 80022bc:	f04f 34ff 	mov.w	r4, #4294967295
 80022c0:	4620      	mov	r0, r4
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	200003c8 	.word	0x200003c8

080022c8 <_malloc_r>:
 80022c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022cc:	1ccd      	adds	r5, r1, #3
 80022ce:	f025 0503 	bic.w	r5, r5, #3
 80022d2:	3508      	adds	r5, #8
 80022d4:	2d0c      	cmp	r5, #12
 80022d6:	bf38      	it	cc
 80022d8:	250c      	movcc	r5, #12
 80022da:	2d00      	cmp	r5, #0
 80022dc:	4607      	mov	r7, r0
 80022de:	db01      	blt.n	80022e4 <_malloc_r+0x1c>
 80022e0:	42a9      	cmp	r1, r5
 80022e2:	d905      	bls.n	80022f0 <_malloc_r+0x28>
 80022e4:	230c      	movs	r3, #12
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	2600      	movs	r6, #0
 80022ea:	4630      	mov	r0, r6
 80022ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80023c4 <_malloc_r+0xfc>
 80022f4:	f000 f868 	bl	80023c8 <__malloc_lock>
 80022f8:	f8d8 3000 	ldr.w	r3, [r8]
 80022fc:	461c      	mov	r4, r3
 80022fe:	bb5c      	cbnz	r4, 8002358 <_malloc_r+0x90>
 8002300:	4629      	mov	r1, r5
 8002302:	4638      	mov	r0, r7
 8002304:	f7ff ffc0 	bl	8002288 <sbrk_aligned>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	4604      	mov	r4, r0
 800230c:	d155      	bne.n	80023ba <_malloc_r+0xf2>
 800230e:	f8d8 4000 	ldr.w	r4, [r8]
 8002312:	4626      	mov	r6, r4
 8002314:	2e00      	cmp	r6, #0
 8002316:	d145      	bne.n	80023a4 <_malloc_r+0xdc>
 8002318:	2c00      	cmp	r4, #0
 800231a:	d048      	beq.n	80023ae <_malloc_r+0xe6>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	4631      	mov	r1, r6
 8002320:	4638      	mov	r0, r7
 8002322:	eb04 0903 	add.w	r9, r4, r3
 8002326:	f000 f9af 	bl	8002688 <_sbrk_r>
 800232a:	4581      	cmp	r9, r0
 800232c:	d13f      	bne.n	80023ae <_malloc_r+0xe6>
 800232e:	6821      	ldr	r1, [r4, #0]
 8002330:	1a6d      	subs	r5, r5, r1
 8002332:	4629      	mov	r1, r5
 8002334:	4638      	mov	r0, r7
 8002336:	f7ff ffa7 	bl	8002288 <sbrk_aligned>
 800233a:	3001      	adds	r0, #1
 800233c:	d037      	beq.n	80023ae <_malloc_r+0xe6>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	442b      	add	r3, r5
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	f8d8 3000 	ldr.w	r3, [r8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d038      	beq.n	80023be <_malloc_r+0xf6>
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	42a2      	cmp	r2, r4
 8002350:	d12b      	bne.n	80023aa <_malloc_r+0xe2>
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	e00f      	b.n	8002378 <_malloc_r+0xb0>
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	1b52      	subs	r2, r2, r5
 800235c:	d41f      	bmi.n	800239e <_malloc_r+0xd6>
 800235e:	2a0b      	cmp	r2, #11
 8002360:	d917      	bls.n	8002392 <_malloc_r+0xca>
 8002362:	1961      	adds	r1, r4, r5
 8002364:	42a3      	cmp	r3, r4
 8002366:	6025      	str	r5, [r4, #0]
 8002368:	bf18      	it	ne
 800236a:	6059      	strne	r1, [r3, #4]
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	bf08      	it	eq
 8002370:	f8c8 1000 	streq.w	r1, [r8]
 8002374:	5162      	str	r2, [r4, r5]
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	4638      	mov	r0, r7
 800237a:	f104 060b 	add.w	r6, r4, #11
 800237e:	f000 f829 	bl	80023d4 <__malloc_unlock>
 8002382:	f026 0607 	bic.w	r6, r6, #7
 8002386:	1d23      	adds	r3, r4, #4
 8002388:	1af2      	subs	r2, r6, r3
 800238a:	d0ae      	beq.n	80022ea <_malloc_r+0x22>
 800238c:	1b9b      	subs	r3, r3, r6
 800238e:	50a3      	str	r3, [r4, r2]
 8002390:	e7ab      	b.n	80022ea <_malloc_r+0x22>
 8002392:	42a3      	cmp	r3, r4
 8002394:	6862      	ldr	r2, [r4, #4]
 8002396:	d1dd      	bne.n	8002354 <_malloc_r+0x8c>
 8002398:	f8c8 2000 	str.w	r2, [r8]
 800239c:	e7ec      	b.n	8002378 <_malloc_r+0xb0>
 800239e:	4623      	mov	r3, r4
 80023a0:	6864      	ldr	r4, [r4, #4]
 80023a2:	e7ac      	b.n	80022fe <_malloc_r+0x36>
 80023a4:	4634      	mov	r4, r6
 80023a6:	6876      	ldr	r6, [r6, #4]
 80023a8:	e7b4      	b.n	8002314 <_malloc_r+0x4c>
 80023aa:	4613      	mov	r3, r2
 80023ac:	e7cc      	b.n	8002348 <_malloc_r+0x80>
 80023ae:	230c      	movs	r3, #12
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4638      	mov	r0, r7
 80023b4:	f000 f80e 	bl	80023d4 <__malloc_unlock>
 80023b8:	e797      	b.n	80022ea <_malloc_r+0x22>
 80023ba:	6025      	str	r5, [r4, #0]
 80023bc:	e7dc      	b.n	8002378 <_malloc_r+0xb0>
 80023be:	605b      	str	r3, [r3, #4]
 80023c0:	deff      	udf	#255	; 0xff
 80023c2:	bf00      	nop
 80023c4:	200003c4 	.word	0x200003c4

080023c8 <__malloc_lock>:
 80023c8:	4801      	ldr	r0, [pc, #4]	; (80023d0 <__malloc_lock+0x8>)
 80023ca:	f000 b9aa 	b.w	8002722 <__retarget_lock_acquire_recursive>
 80023ce:	bf00      	nop
 80023d0:	2000050c 	.word	0x2000050c

080023d4 <__malloc_unlock>:
 80023d4:	4801      	ldr	r0, [pc, #4]	; (80023dc <__malloc_unlock+0x8>)
 80023d6:	f000 b9a5 	b.w	8002724 <__retarget_lock_release_recursive>
 80023da:	bf00      	nop
 80023dc:	2000050c 	.word	0x2000050c

080023e0 <std>:
 80023e0:	2300      	movs	r3, #0
 80023e2:	b510      	push	{r4, lr}
 80023e4:	4604      	mov	r4, r0
 80023e6:	e9c0 3300 	strd	r3, r3, [r0]
 80023ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ee:	6083      	str	r3, [r0, #8]
 80023f0:	8181      	strh	r1, [r0, #12]
 80023f2:	6643      	str	r3, [r0, #100]	; 0x64
 80023f4:	81c2      	strh	r2, [r0, #14]
 80023f6:	6183      	str	r3, [r0, #24]
 80023f8:	4619      	mov	r1, r3
 80023fa:	2208      	movs	r2, #8
 80023fc:	305c      	adds	r0, #92	; 0x5c
 80023fe:	f000 f906 	bl	800260e <memset>
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <std+0x58>)
 8002404:	6263      	str	r3, [r4, #36]	; 0x24
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <std+0x5c>)
 8002408:	62a3      	str	r3, [r4, #40]	; 0x28
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <std+0x60>)
 800240c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <std+0x64>)
 8002410:	6323      	str	r3, [r4, #48]	; 0x30
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <std+0x68>)
 8002414:	6224      	str	r4, [r4, #32]
 8002416:	429c      	cmp	r4, r3
 8002418:	d006      	beq.n	8002428 <std+0x48>
 800241a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800241e:	4294      	cmp	r4, r2
 8002420:	d002      	beq.n	8002428 <std+0x48>
 8002422:	33d0      	adds	r3, #208	; 0xd0
 8002424:	429c      	cmp	r4, r3
 8002426:	d105      	bne.n	8002434 <std+0x54>
 8002428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002430:	f000 b976 	b.w	8002720 <__retarget_lock_init_recursive>
 8002434:	bd10      	pop	{r4, pc}
 8002436:	bf00      	nop
 8002438:	08002589 	.word	0x08002589
 800243c:	080025ab 	.word	0x080025ab
 8002440:	080025e3 	.word	0x080025e3
 8002444:	08002607 	.word	0x08002607
 8002448:	200003cc 	.word	0x200003cc

0800244c <stdio_exit_handler>:
 800244c:	4a02      	ldr	r2, [pc, #8]	; (8002458 <stdio_exit_handler+0xc>)
 800244e:	4903      	ldr	r1, [pc, #12]	; (800245c <stdio_exit_handler+0x10>)
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <stdio_exit_handler+0x14>)
 8002452:	f000 b869 	b.w	8002528 <_fwalk_sglue>
 8002456:	bf00      	nop
 8002458:	2000001c 	.word	0x2000001c
 800245c:	08002e75 	.word	0x08002e75
 8002460:	20000028 	.word	0x20000028

08002464 <cleanup_stdio>:
 8002464:	6841      	ldr	r1, [r0, #4]
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <cleanup_stdio+0x34>)
 8002468:	4299      	cmp	r1, r3
 800246a:	b510      	push	{r4, lr}
 800246c:	4604      	mov	r4, r0
 800246e:	d001      	beq.n	8002474 <cleanup_stdio+0x10>
 8002470:	f000 fd00 	bl	8002e74 <_fflush_r>
 8002474:	68a1      	ldr	r1, [r4, #8]
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <cleanup_stdio+0x38>)
 8002478:	4299      	cmp	r1, r3
 800247a:	d002      	beq.n	8002482 <cleanup_stdio+0x1e>
 800247c:	4620      	mov	r0, r4
 800247e:	f000 fcf9 	bl	8002e74 <_fflush_r>
 8002482:	68e1      	ldr	r1, [r4, #12]
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <cleanup_stdio+0x3c>)
 8002486:	4299      	cmp	r1, r3
 8002488:	d004      	beq.n	8002494 <cleanup_stdio+0x30>
 800248a:	4620      	mov	r0, r4
 800248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002490:	f000 bcf0 	b.w	8002e74 <_fflush_r>
 8002494:	bd10      	pop	{r4, pc}
 8002496:	bf00      	nop
 8002498:	200003cc 	.word	0x200003cc
 800249c:	20000434 	.word	0x20000434
 80024a0:	2000049c 	.word	0x2000049c

080024a4 <global_stdio_init.part.0>:
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <global_stdio_init.part.0+0x30>)
 80024a8:	4c0b      	ldr	r4, [pc, #44]	; (80024d8 <global_stdio_init.part.0+0x34>)
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <global_stdio_init.part.0+0x38>)
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	4620      	mov	r0, r4
 80024b0:	2200      	movs	r2, #0
 80024b2:	2104      	movs	r1, #4
 80024b4:	f7ff ff94 	bl	80023e0 <std>
 80024b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80024bc:	2201      	movs	r2, #1
 80024be:	2109      	movs	r1, #9
 80024c0:	f7ff ff8e 	bl	80023e0 <std>
 80024c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80024c8:	2202      	movs	r2, #2
 80024ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ce:	2112      	movs	r1, #18
 80024d0:	f7ff bf86 	b.w	80023e0 <std>
 80024d4:	20000504 	.word	0x20000504
 80024d8:	200003cc 	.word	0x200003cc
 80024dc:	0800244d 	.word	0x0800244d

080024e0 <__sfp_lock_acquire>:
 80024e0:	4801      	ldr	r0, [pc, #4]	; (80024e8 <__sfp_lock_acquire+0x8>)
 80024e2:	f000 b91e 	b.w	8002722 <__retarget_lock_acquire_recursive>
 80024e6:	bf00      	nop
 80024e8:	2000050d 	.word	0x2000050d

080024ec <__sfp_lock_release>:
 80024ec:	4801      	ldr	r0, [pc, #4]	; (80024f4 <__sfp_lock_release+0x8>)
 80024ee:	f000 b919 	b.w	8002724 <__retarget_lock_release_recursive>
 80024f2:	bf00      	nop
 80024f4:	2000050d 	.word	0x2000050d

080024f8 <__sinit>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4604      	mov	r4, r0
 80024fc:	f7ff fff0 	bl	80024e0 <__sfp_lock_acquire>
 8002500:	6a23      	ldr	r3, [r4, #32]
 8002502:	b11b      	cbz	r3, 800250c <__sinit+0x14>
 8002504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002508:	f7ff bff0 	b.w	80024ec <__sfp_lock_release>
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__sinit+0x28>)
 800250e:	6223      	str	r3, [r4, #32]
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <__sinit+0x2c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f5      	bne.n	8002504 <__sinit+0xc>
 8002518:	f7ff ffc4 	bl	80024a4 <global_stdio_init.part.0>
 800251c:	e7f2      	b.n	8002504 <__sinit+0xc>
 800251e:	bf00      	nop
 8002520:	08002465 	.word	0x08002465
 8002524:	20000504 	.word	0x20000504

08002528 <_fwalk_sglue>:
 8002528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800252c:	4607      	mov	r7, r0
 800252e:	4688      	mov	r8, r1
 8002530:	4614      	mov	r4, r2
 8002532:	2600      	movs	r6, #0
 8002534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002538:	f1b9 0901 	subs.w	r9, r9, #1
 800253c:	d505      	bpl.n	800254a <_fwalk_sglue+0x22>
 800253e:	6824      	ldr	r4, [r4, #0]
 8002540:	2c00      	cmp	r4, #0
 8002542:	d1f7      	bne.n	8002534 <_fwalk_sglue+0xc>
 8002544:	4630      	mov	r0, r6
 8002546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800254a:	89ab      	ldrh	r3, [r5, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d907      	bls.n	8002560 <_fwalk_sglue+0x38>
 8002550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002554:	3301      	adds	r3, #1
 8002556:	d003      	beq.n	8002560 <_fwalk_sglue+0x38>
 8002558:	4629      	mov	r1, r5
 800255a:	4638      	mov	r0, r7
 800255c:	47c0      	blx	r8
 800255e:	4306      	orrs	r6, r0
 8002560:	3568      	adds	r5, #104	; 0x68
 8002562:	e7e9      	b.n	8002538 <_fwalk_sglue+0x10>

08002564 <iprintf>:
 8002564:	b40f      	push	{r0, r1, r2, r3}
 8002566:	b507      	push	{r0, r1, r2, lr}
 8002568:	4906      	ldr	r1, [pc, #24]	; (8002584 <iprintf+0x20>)
 800256a:	ab04      	add	r3, sp, #16
 800256c:	6808      	ldr	r0, [r1, #0]
 800256e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002572:	6881      	ldr	r1, [r0, #8]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f000 f94d 	bl	8002814 <_vfiprintf_r>
 800257a:	b003      	add	sp, #12
 800257c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002580:	b004      	add	sp, #16
 8002582:	4770      	bx	lr
 8002584:	20000074 	.word	0x20000074

08002588 <__sread>:
 8002588:	b510      	push	{r4, lr}
 800258a:	460c      	mov	r4, r1
 800258c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002590:	f000 f868 	bl	8002664 <_read_r>
 8002594:	2800      	cmp	r0, #0
 8002596:	bfab      	itete	ge
 8002598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800259a:	89a3      	ldrhlt	r3, [r4, #12]
 800259c:	181b      	addge	r3, r3, r0
 800259e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025a2:	bfac      	ite	ge
 80025a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80025a6:	81a3      	strhlt	r3, [r4, #12]
 80025a8:	bd10      	pop	{r4, pc}

080025aa <__swrite>:
 80025aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ae:	461f      	mov	r7, r3
 80025b0:	898b      	ldrh	r3, [r1, #12]
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	4605      	mov	r5, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	4616      	mov	r6, r2
 80025ba:	d505      	bpl.n	80025c8 <__swrite+0x1e>
 80025bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c0:	2302      	movs	r3, #2
 80025c2:	2200      	movs	r2, #0
 80025c4:	f000 f83c 	bl	8002640 <_lseek_r>
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d2:	81a3      	strh	r3, [r4, #12]
 80025d4:	4632      	mov	r2, r6
 80025d6:	463b      	mov	r3, r7
 80025d8:	4628      	mov	r0, r5
 80025da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025de:	f000 b863 	b.w	80026a8 <_write_r>

080025e2 <__sseek>:
 80025e2:	b510      	push	{r4, lr}
 80025e4:	460c      	mov	r4, r1
 80025e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ea:	f000 f829 	bl	8002640 <_lseek_r>
 80025ee:	1c43      	adds	r3, r0, #1
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	bf15      	itete	ne
 80025f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80025f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025fe:	81a3      	strheq	r3, [r4, #12]
 8002600:	bf18      	it	ne
 8002602:	81a3      	strhne	r3, [r4, #12]
 8002604:	bd10      	pop	{r4, pc}

08002606 <__sclose>:
 8002606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260a:	f000 b809 	b.w	8002620 <_close_r>

0800260e <memset>:
 800260e:	4402      	add	r2, r0
 8002610:	4603      	mov	r3, r0
 8002612:	4293      	cmp	r3, r2
 8002614:	d100      	bne.n	8002618 <memset+0xa>
 8002616:	4770      	bx	lr
 8002618:	f803 1b01 	strb.w	r1, [r3], #1
 800261c:	e7f9      	b.n	8002612 <memset+0x4>
	...

08002620 <_close_r>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4d06      	ldr	r5, [pc, #24]	; (800263c <_close_r+0x1c>)
 8002624:	2300      	movs	r3, #0
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	602b      	str	r3, [r5, #0]
 800262c:	f7fe f833 	bl	8000696 <_close>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d102      	bne.n	800263a <_close_r+0x1a>
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	b103      	cbz	r3, 800263a <_close_r+0x1a>
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	bd38      	pop	{r3, r4, r5, pc}
 800263c:	20000508 	.word	0x20000508

08002640 <_lseek_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	4d07      	ldr	r5, [pc, #28]	; (8002660 <_lseek_r+0x20>)
 8002644:	4604      	mov	r4, r0
 8002646:	4608      	mov	r0, r1
 8002648:	4611      	mov	r1, r2
 800264a:	2200      	movs	r2, #0
 800264c:	602a      	str	r2, [r5, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	f7fe f848 	bl	80006e4 <_lseek>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_lseek_r+0x1e>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_lseek_r+0x1e>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	20000508 	.word	0x20000508

08002664 <_read_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4d07      	ldr	r5, [pc, #28]	; (8002684 <_read_r+0x20>)
 8002668:	4604      	mov	r4, r0
 800266a:	4608      	mov	r0, r1
 800266c:	4611      	mov	r1, r2
 800266e:	2200      	movs	r2, #0
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fd ffd6 	bl	8000624 <_read>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_read_r+0x1e>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_read_r+0x1e>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	20000508 	.word	0x20000508

08002688 <_sbrk_r>:
 8002688:	b538      	push	{r3, r4, r5, lr}
 800268a:	4d06      	ldr	r5, [pc, #24]	; (80026a4 <_sbrk_r+0x1c>)
 800268c:	2300      	movs	r3, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	602b      	str	r3, [r5, #0]
 8002694:	f7fe f834 	bl	8000700 <_sbrk>
 8002698:	1c43      	adds	r3, r0, #1
 800269a:	d102      	bne.n	80026a2 <_sbrk_r+0x1a>
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	b103      	cbz	r3, 80026a2 <_sbrk_r+0x1a>
 80026a0:	6023      	str	r3, [r4, #0]
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	20000508 	.word	0x20000508

080026a8 <_write_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d07      	ldr	r5, [pc, #28]	; (80026c8 <_write_r+0x20>)
 80026ac:	4604      	mov	r4, r0
 80026ae:	4608      	mov	r0, r1
 80026b0:	4611      	mov	r1, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	602a      	str	r2, [r5, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7fd ffd1 	bl	800065e <_write>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d102      	bne.n	80026c6 <_write_r+0x1e>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <_write_r+0x1e>
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	20000508 	.word	0x20000508

080026cc <__errno>:
 80026cc:	4b01      	ldr	r3, [pc, #4]	; (80026d4 <__errno+0x8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000074 	.word	0x20000074

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4d0d      	ldr	r5, [pc, #52]	; (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2600      	movs	r6, #0
 80026e4:	42a6      	cmp	r6, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4d0b      	ldr	r5, [pc, #44]	; (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	; (800271c <__libc_init_array+0x44>)
 80026ec:	f000 fd04 	bl	80030f8 <_init>
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2600      	movs	r6, #0
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002700:	4798      	blx	r3
 8002702:	3601      	adds	r6, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f855 3b04 	ldr.w	r3, [r5], #4
 800270a:	4798      	blx	r3
 800270c:	3601      	adds	r6, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	0800317c 	.word	0x0800317c
 8002714:	0800317c 	.word	0x0800317c
 8002718:	0800317c 	.word	0x0800317c
 800271c:	08003180 	.word	0x08003180

08002720 <__retarget_lock_init_recursive>:
 8002720:	4770      	bx	lr

08002722 <__retarget_lock_acquire_recursive>:
 8002722:	4770      	bx	lr

08002724 <__retarget_lock_release_recursive>:
 8002724:	4770      	bx	lr
	...

08002728 <_free_r>:
 8002728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800272a:	2900      	cmp	r1, #0
 800272c:	d044      	beq.n	80027b8 <_free_r+0x90>
 800272e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002732:	9001      	str	r0, [sp, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f1a1 0404 	sub.w	r4, r1, #4
 800273a:	bfb8      	it	lt
 800273c:	18e4      	addlt	r4, r4, r3
 800273e:	f7ff fe43 	bl	80023c8 <__malloc_lock>
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <_free_r+0x94>)
 8002744:	9801      	ldr	r0, [sp, #4]
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	b933      	cbnz	r3, 8002758 <_free_r+0x30>
 800274a:	6063      	str	r3, [r4, #4]
 800274c:	6014      	str	r4, [r2, #0]
 800274e:	b003      	add	sp, #12
 8002750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002754:	f7ff be3e 	b.w	80023d4 <__malloc_unlock>
 8002758:	42a3      	cmp	r3, r4
 800275a:	d908      	bls.n	800276e <_free_r+0x46>
 800275c:	6825      	ldr	r5, [r4, #0]
 800275e:	1961      	adds	r1, r4, r5
 8002760:	428b      	cmp	r3, r1
 8002762:	bf01      	itttt	eq
 8002764:	6819      	ldreq	r1, [r3, #0]
 8002766:	685b      	ldreq	r3, [r3, #4]
 8002768:	1949      	addeq	r1, r1, r5
 800276a:	6021      	streq	r1, [r4, #0]
 800276c:	e7ed      	b.n	800274a <_free_r+0x22>
 800276e:	461a      	mov	r2, r3
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b10b      	cbz	r3, 8002778 <_free_r+0x50>
 8002774:	42a3      	cmp	r3, r4
 8002776:	d9fa      	bls.n	800276e <_free_r+0x46>
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	1855      	adds	r5, r2, r1
 800277c:	42a5      	cmp	r5, r4
 800277e:	d10b      	bne.n	8002798 <_free_r+0x70>
 8002780:	6824      	ldr	r4, [r4, #0]
 8002782:	4421      	add	r1, r4
 8002784:	1854      	adds	r4, r2, r1
 8002786:	42a3      	cmp	r3, r4
 8002788:	6011      	str	r1, [r2, #0]
 800278a:	d1e0      	bne.n	800274e <_free_r+0x26>
 800278c:	681c      	ldr	r4, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	6053      	str	r3, [r2, #4]
 8002792:	440c      	add	r4, r1
 8002794:	6014      	str	r4, [r2, #0]
 8002796:	e7da      	b.n	800274e <_free_r+0x26>
 8002798:	d902      	bls.n	80027a0 <_free_r+0x78>
 800279a:	230c      	movs	r3, #12
 800279c:	6003      	str	r3, [r0, #0]
 800279e:	e7d6      	b.n	800274e <_free_r+0x26>
 80027a0:	6825      	ldr	r5, [r4, #0]
 80027a2:	1961      	adds	r1, r4, r5
 80027a4:	428b      	cmp	r3, r1
 80027a6:	bf04      	itt	eq
 80027a8:	6819      	ldreq	r1, [r3, #0]
 80027aa:	685b      	ldreq	r3, [r3, #4]
 80027ac:	6063      	str	r3, [r4, #4]
 80027ae:	bf04      	itt	eq
 80027b0:	1949      	addeq	r1, r1, r5
 80027b2:	6021      	streq	r1, [r4, #0]
 80027b4:	6054      	str	r4, [r2, #4]
 80027b6:	e7ca      	b.n	800274e <_free_r+0x26>
 80027b8:	b003      	add	sp, #12
 80027ba:	bd30      	pop	{r4, r5, pc}
 80027bc:	200003c4 	.word	0x200003c4

080027c0 <__sfputc_r>:
 80027c0:	6893      	ldr	r3, [r2, #8]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	b410      	push	{r4}
 80027c8:	6093      	str	r3, [r2, #8]
 80027ca:	da08      	bge.n	80027de <__sfputc_r+0x1e>
 80027cc:	6994      	ldr	r4, [r2, #24]
 80027ce:	42a3      	cmp	r3, r4
 80027d0:	db01      	blt.n	80027d6 <__sfputc_r+0x16>
 80027d2:	290a      	cmp	r1, #10
 80027d4:	d103      	bne.n	80027de <__sfputc_r+0x1e>
 80027d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027da:	f000 bb73 	b.w	8002ec4 <__swbuf_r>
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	1c58      	adds	r0, r3, #1
 80027e2:	6010      	str	r0, [r2, #0]
 80027e4:	7019      	strb	r1, [r3, #0]
 80027e6:	4608      	mov	r0, r1
 80027e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <__sfputs_r>:
 80027ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f0:	4606      	mov	r6, r0
 80027f2:	460f      	mov	r7, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	18d5      	adds	r5, r2, r3
 80027f8:	42ac      	cmp	r4, r5
 80027fa:	d101      	bne.n	8002800 <__sfputs_r+0x12>
 80027fc:	2000      	movs	r0, #0
 80027fe:	e007      	b.n	8002810 <__sfputs_r+0x22>
 8002800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002804:	463a      	mov	r2, r7
 8002806:	4630      	mov	r0, r6
 8002808:	f7ff ffda 	bl	80027c0 <__sfputc_r>
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	d1f3      	bne.n	80027f8 <__sfputs_r+0xa>
 8002810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002814 <_vfiprintf_r>:
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	460d      	mov	r5, r1
 800281a:	b09d      	sub	sp, #116	; 0x74
 800281c:	4614      	mov	r4, r2
 800281e:	4698      	mov	r8, r3
 8002820:	4606      	mov	r6, r0
 8002822:	b118      	cbz	r0, 800282c <_vfiprintf_r+0x18>
 8002824:	6a03      	ldr	r3, [r0, #32]
 8002826:	b90b      	cbnz	r3, 800282c <_vfiprintf_r+0x18>
 8002828:	f7ff fe66 	bl	80024f8 <__sinit>
 800282c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800282e:	07d9      	lsls	r1, r3, #31
 8002830:	d405      	bmi.n	800283e <_vfiprintf_r+0x2a>
 8002832:	89ab      	ldrh	r3, [r5, #12]
 8002834:	059a      	lsls	r2, r3, #22
 8002836:	d402      	bmi.n	800283e <_vfiprintf_r+0x2a>
 8002838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800283a:	f7ff ff72 	bl	8002722 <__retarget_lock_acquire_recursive>
 800283e:	89ab      	ldrh	r3, [r5, #12]
 8002840:	071b      	lsls	r3, r3, #28
 8002842:	d501      	bpl.n	8002848 <_vfiprintf_r+0x34>
 8002844:	692b      	ldr	r3, [r5, #16]
 8002846:	b99b      	cbnz	r3, 8002870 <_vfiprintf_r+0x5c>
 8002848:	4629      	mov	r1, r5
 800284a:	4630      	mov	r0, r6
 800284c:	f000 fb78 	bl	8002f40 <__swsetup_r>
 8002850:	b170      	cbz	r0, 8002870 <_vfiprintf_r+0x5c>
 8002852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002854:	07dc      	lsls	r4, r3, #31
 8002856:	d504      	bpl.n	8002862 <_vfiprintf_r+0x4e>
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	b01d      	add	sp, #116	; 0x74
 800285e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002862:	89ab      	ldrh	r3, [r5, #12]
 8002864:	0598      	lsls	r0, r3, #22
 8002866:	d4f7      	bmi.n	8002858 <_vfiprintf_r+0x44>
 8002868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800286a:	f7ff ff5b 	bl	8002724 <__retarget_lock_release_recursive>
 800286e:	e7f3      	b.n	8002858 <_vfiprintf_r+0x44>
 8002870:	2300      	movs	r3, #0
 8002872:	9309      	str	r3, [sp, #36]	; 0x24
 8002874:	2320      	movs	r3, #32
 8002876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800287a:	f8cd 800c 	str.w	r8, [sp, #12]
 800287e:	2330      	movs	r3, #48	; 0x30
 8002880:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002a34 <_vfiprintf_r+0x220>
 8002884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002888:	f04f 0901 	mov.w	r9, #1
 800288c:	4623      	mov	r3, r4
 800288e:	469a      	mov	sl, r3
 8002890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002894:	b10a      	cbz	r2, 800289a <_vfiprintf_r+0x86>
 8002896:	2a25      	cmp	r2, #37	; 0x25
 8002898:	d1f9      	bne.n	800288e <_vfiprintf_r+0x7a>
 800289a:	ebba 0b04 	subs.w	fp, sl, r4
 800289e:	d00b      	beq.n	80028b8 <_vfiprintf_r+0xa4>
 80028a0:	465b      	mov	r3, fp
 80028a2:	4622      	mov	r2, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	4630      	mov	r0, r6
 80028a8:	f7ff ffa1 	bl	80027ee <__sfputs_r>
 80028ac:	3001      	adds	r0, #1
 80028ae:	f000 80a9 	beq.w	8002a04 <_vfiprintf_r+0x1f0>
 80028b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028b4:	445a      	add	r2, fp
 80028b6:	9209      	str	r2, [sp, #36]	; 0x24
 80028b8:	f89a 3000 	ldrb.w	r3, [sl]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80a1 	beq.w	8002a04 <_vfiprintf_r+0x1f0>
 80028c2:	2300      	movs	r3, #0
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028cc:	f10a 0a01 	add.w	sl, sl, #1
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	9307      	str	r3, [sp, #28]
 80028d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028d8:	931a      	str	r3, [sp, #104]	; 0x68
 80028da:	4654      	mov	r4, sl
 80028dc:	2205      	movs	r2, #5
 80028de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e2:	4854      	ldr	r0, [pc, #336]	; (8002a34 <_vfiprintf_r+0x220>)
 80028e4:	f7fd fc7c 	bl	80001e0 <memchr>
 80028e8:	9a04      	ldr	r2, [sp, #16]
 80028ea:	b9d8      	cbnz	r0, 8002924 <_vfiprintf_r+0x110>
 80028ec:	06d1      	lsls	r1, r2, #27
 80028ee:	bf44      	itt	mi
 80028f0:	2320      	movmi	r3, #32
 80028f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028f6:	0713      	lsls	r3, r2, #28
 80028f8:	bf44      	itt	mi
 80028fa:	232b      	movmi	r3, #43	; 0x2b
 80028fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002900:	f89a 3000 	ldrb.w	r3, [sl]
 8002904:	2b2a      	cmp	r3, #42	; 0x2a
 8002906:	d015      	beq.n	8002934 <_vfiprintf_r+0x120>
 8002908:	9a07      	ldr	r2, [sp, #28]
 800290a:	4654      	mov	r4, sl
 800290c:	2000      	movs	r0, #0
 800290e:	f04f 0c0a 	mov.w	ip, #10
 8002912:	4621      	mov	r1, r4
 8002914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002918:	3b30      	subs	r3, #48	; 0x30
 800291a:	2b09      	cmp	r3, #9
 800291c:	d94d      	bls.n	80029ba <_vfiprintf_r+0x1a6>
 800291e:	b1b0      	cbz	r0, 800294e <_vfiprintf_r+0x13a>
 8002920:	9207      	str	r2, [sp, #28]
 8002922:	e014      	b.n	800294e <_vfiprintf_r+0x13a>
 8002924:	eba0 0308 	sub.w	r3, r0, r8
 8002928:	fa09 f303 	lsl.w	r3, r9, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	9304      	str	r3, [sp, #16]
 8002930:	46a2      	mov	sl, r4
 8002932:	e7d2      	b.n	80028da <_vfiprintf_r+0xc6>
 8002934:	9b03      	ldr	r3, [sp, #12]
 8002936:	1d19      	adds	r1, r3, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	9103      	str	r1, [sp, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	bfbb      	ittet	lt
 8002940:	425b      	neglt	r3, r3
 8002942:	f042 0202 	orrlt.w	r2, r2, #2
 8002946:	9307      	strge	r3, [sp, #28]
 8002948:	9307      	strlt	r3, [sp, #28]
 800294a:	bfb8      	it	lt
 800294c:	9204      	strlt	r2, [sp, #16]
 800294e:	7823      	ldrb	r3, [r4, #0]
 8002950:	2b2e      	cmp	r3, #46	; 0x2e
 8002952:	d10c      	bne.n	800296e <_vfiprintf_r+0x15a>
 8002954:	7863      	ldrb	r3, [r4, #1]
 8002956:	2b2a      	cmp	r3, #42	; 0x2a
 8002958:	d134      	bne.n	80029c4 <_vfiprintf_r+0x1b0>
 800295a:	9b03      	ldr	r3, [sp, #12]
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	9203      	str	r2, [sp, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	f04f 33ff 	movlt.w	r3, #4294967295
 800296a:	3402      	adds	r4, #2
 800296c:	9305      	str	r3, [sp, #20]
 800296e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a44 <_vfiprintf_r+0x230>
 8002972:	7821      	ldrb	r1, [r4, #0]
 8002974:	2203      	movs	r2, #3
 8002976:	4650      	mov	r0, sl
 8002978:	f7fd fc32 	bl	80001e0 <memchr>
 800297c:	b138      	cbz	r0, 800298e <_vfiprintf_r+0x17a>
 800297e:	9b04      	ldr	r3, [sp, #16]
 8002980:	eba0 000a 	sub.w	r0, r0, sl
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	4082      	lsls	r2, r0
 8002988:	4313      	orrs	r3, r2
 800298a:	3401      	adds	r4, #1
 800298c:	9304      	str	r3, [sp, #16]
 800298e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002992:	4829      	ldr	r0, [pc, #164]	; (8002a38 <_vfiprintf_r+0x224>)
 8002994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002998:	2206      	movs	r2, #6
 800299a:	f7fd fc21 	bl	80001e0 <memchr>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d03f      	beq.n	8002a22 <_vfiprintf_r+0x20e>
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <_vfiprintf_r+0x228>)
 80029a4:	bb1b      	cbnz	r3, 80029ee <_vfiprintf_r+0x1da>
 80029a6:	9b03      	ldr	r3, [sp, #12]
 80029a8:	3307      	adds	r3, #7
 80029aa:	f023 0307 	bic.w	r3, r3, #7
 80029ae:	3308      	adds	r3, #8
 80029b0:	9303      	str	r3, [sp, #12]
 80029b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029b4:	443b      	add	r3, r7
 80029b6:	9309      	str	r3, [sp, #36]	; 0x24
 80029b8:	e768      	b.n	800288c <_vfiprintf_r+0x78>
 80029ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80029be:	460c      	mov	r4, r1
 80029c0:	2001      	movs	r0, #1
 80029c2:	e7a6      	b.n	8002912 <_vfiprintf_r+0xfe>
 80029c4:	2300      	movs	r3, #0
 80029c6:	3401      	adds	r4, #1
 80029c8:	9305      	str	r3, [sp, #20]
 80029ca:	4619      	mov	r1, r3
 80029cc:	f04f 0c0a 	mov.w	ip, #10
 80029d0:	4620      	mov	r0, r4
 80029d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029d6:	3a30      	subs	r2, #48	; 0x30
 80029d8:	2a09      	cmp	r2, #9
 80029da:	d903      	bls.n	80029e4 <_vfiprintf_r+0x1d0>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0c6      	beq.n	800296e <_vfiprintf_r+0x15a>
 80029e0:	9105      	str	r1, [sp, #20]
 80029e2:	e7c4      	b.n	800296e <_vfiprintf_r+0x15a>
 80029e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80029e8:	4604      	mov	r4, r0
 80029ea:	2301      	movs	r3, #1
 80029ec:	e7f0      	b.n	80029d0 <_vfiprintf_r+0x1bc>
 80029ee:	ab03      	add	r3, sp, #12
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	462a      	mov	r2, r5
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <_vfiprintf_r+0x22c>)
 80029f6:	a904      	add	r1, sp, #16
 80029f8:	4630      	mov	r0, r6
 80029fa:	f3af 8000 	nop.w
 80029fe:	4607      	mov	r7, r0
 8002a00:	1c78      	adds	r0, r7, #1
 8002a02:	d1d6      	bne.n	80029b2 <_vfiprintf_r+0x19e>
 8002a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a06:	07d9      	lsls	r1, r3, #31
 8002a08:	d405      	bmi.n	8002a16 <_vfiprintf_r+0x202>
 8002a0a:	89ab      	ldrh	r3, [r5, #12]
 8002a0c:	059a      	lsls	r2, r3, #22
 8002a0e:	d402      	bmi.n	8002a16 <_vfiprintf_r+0x202>
 8002a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a12:	f7ff fe87 	bl	8002724 <__retarget_lock_release_recursive>
 8002a16:	89ab      	ldrh	r3, [r5, #12]
 8002a18:	065b      	lsls	r3, r3, #25
 8002a1a:	f53f af1d 	bmi.w	8002858 <_vfiprintf_r+0x44>
 8002a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a20:	e71c      	b.n	800285c <_vfiprintf_r+0x48>
 8002a22:	ab03      	add	r3, sp, #12
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	462a      	mov	r2, r5
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <_vfiprintf_r+0x22c>)
 8002a2a:	a904      	add	r1, sp, #16
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f879 	bl	8002b24 <_printf_i>
 8002a32:	e7e4      	b.n	80029fe <_vfiprintf_r+0x1ea>
 8002a34:	08003146 	.word	0x08003146
 8002a38:	08003150 	.word	0x08003150
 8002a3c:	00000000 	.word	0x00000000
 8002a40:	080027ef 	.word	0x080027ef
 8002a44:	0800314c 	.word	0x0800314c

08002a48 <_printf_common>:
 8002a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	690b      	ldr	r3, [r1, #16]
 8002a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bfb8      	it	lt
 8002a5c:	4613      	movlt	r3, r2
 8002a5e:	6033      	str	r3, [r6, #0]
 8002a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a64:	4607      	mov	r7, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	b10a      	cbz	r2, 8002a6e <_printf_common+0x26>
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	0699      	lsls	r1, r3, #26
 8002a72:	bf42      	ittt	mi
 8002a74:	6833      	ldrmi	r3, [r6, #0]
 8002a76:	3302      	addmi	r3, #2
 8002a78:	6033      	strmi	r3, [r6, #0]
 8002a7a:	6825      	ldr	r5, [r4, #0]
 8002a7c:	f015 0506 	ands.w	r5, r5, #6
 8002a80:	d106      	bne.n	8002a90 <_printf_common+0x48>
 8002a82:	f104 0a19 	add.w	sl, r4, #25
 8002a86:	68e3      	ldr	r3, [r4, #12]
 8002a88:	6832      	ldr	r2, [r6, #0]
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	dc26      	bgt.n	8002ade <_printf_common+0x96>
 8002a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a94:	1e13      	subs	r3, r2, #0
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	bf18      	it	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	0692      	lsls	r2, r2, #26
 8002a9e:	d42b      	bmi.n	8002af8 <_printf_common+0xb0>
 8002aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	47c0      	blx	r8
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d01e      	beq.n	8002aec <_printf_common+0xa4>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf02      	ittt	eq
 8002aba:	68e5      	ldreq	r5, [r4, #12]
 8002abc:	6833      	ldreq	r3, [r6, #0]
 8002abe:	1aed      	subeq	r5, r5, r3
 8002ac0:	68a3      	ldr	r3, [r4, #8]
 8002ac2:	bf0c      	ite	eq
 8002ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ac8:	2500      	movne	r5, #0
 8002aca:	4293      	cmp	r3, r2
 8002acc:	bfc4      	itt	gt
 8002ace:	1a9b      	subgt	r3, r3, r2
 8002ad0:	18ed      	addgt	r5, r5, r3
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	341a      	adds	r4, #26
 8002ad6:	42b5      	cmp	r5, r6
 8002ad8:	d11a      	bne.n	8002b10 <_printf_common+0xc8>
 8002ada:	2000      	movs	r0, #0
 8002adc:	e008      	b.n	8002af0 <_printf_common+0xa8>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	47c0      	blx	r8
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d103      	bne.n	8002af4 <_printf_common+0xac>
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	3501      	adds	r5, #1
 8002af6:	e7c6      	b.n	8002a86 <_printf_common+0x3e>
 8002af8:	18e1      	adds	r1, r4, r3
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	2030      	movs	r0, #48	; 0x30
 8002afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b02:	4422      	add	r2, r4
 8002b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	e7c7      	b.n	8002aa0 <_printf_common+0x58>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4622      	mov	r2, r4
 8002b14:	4649      	mov	r1, r9
 8002b16:	4638      	mov	r0, r7
 8002b18:	47c0      	blx	r8
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d0e6      	beq.n	8002aec <_printf_common+0xa4>
 8002b1e:	3601      	adds	r6, #1
 8002b20:	e7d9      	b.n	8002ad6 <_printf_common+0x8e>
	...

08002b24 <_printf_i>:
 8002b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b28:	7e0f      	ldrb	r7, [r1, #24]
 8002b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b2c:	2f78      	cmp	r7, #120	; 0x78
 8002b2e:	4691      	mov	r9, r2
 8002b30:	4680      	mov	r8, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	469a      	mov	sl, r3
 8002b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b3a:	d807      	bhi.n	8002b4c <_printf_i+0x28>
 8002b3c:	2f62      	cmp	r7, #98	; 0x62
 8002b3e:	d80a      	bhi.n	8002b56 <_printf_i+0x32>
 8002b40:	2f00      	cmp	r7, #0
 8002b42:	f000 80d4 	beq.w	8002cee <_printf_i+0x1ca>
 8002b46:	2f58      	cmp	r7, #88	; 0x58
 8002b48:	f000 80c0 	beq.w	8002ccc <_printf_i+0x1a8>
 8002b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b54:	e03a      	b.n	8002bcc <_printf_i+0xa8>
 8002b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b5a:	2b15      	cmp	r3, #21
 8002b5c:	d8f6      	bhi.n	8002b4c <_printf_i+0x28>
 8002b5e:	a101      	add	r1, pc, #4	; (adr r1, 8002b64 <_printf_i+0x40>)
 8002b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b64:	08002bbd 	.word	0x08002bbd
 8002b68:	08002bd1 	.word	0x08002bd1
 8002b6c:	08002b4d 	.word	0x08002b4d
 8002b70:	08002b4d 	.word	0x08002b4d
 8002b74:	08002b4d 	.word	0x08002b4d
 8002b78:	08002b4d 	.word	0x08002b4d
 8002b7c:	08002bd1 	.word	0x08002bd1
 8002b80:	08002b4d 	.word	0x08002b4d
 8002b84:	08002b4d 	.word	0x08002b4d
 8002b88:	08002b4d 	.word	0x08002b4d
 8002b8c:	08002b4d 	.word	0x08002b4d
 8002b90:	08002cd5 	.word	0x08002cd5
 8002b94:	08002bfd 	.word	0x08002bfd
 8002b98:	08002c8f 	.word	0x08002c8f
 8002b9c:	08002b4d 	.word	0x08002b4d
 8002ba0:	08002b4d 	.word	0x08002b4d
 8002ba4:	08002cf7 	.word	0x08002cf7
 8002ba8:	08002b4d 	.word	0x08002b4d
 8002bac:	08002bfd 	.word	0x08002bfd
 8002bb0:	08002b4d 	.word	0x08002b4d
 8002bb4:	08002b4d 	.word	0x08002b4d
 8002bb8:	08002c97 	.word	0x08002c97
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	602a      	str	r2, [r5, #0]
 8002bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e09f      	b.n	8002d10 <_printf_i+0x1ec>
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	682b      	ldr	r3, [r5, #0]
 8002bd4:	0607      	lsls	r7, r0, #24
 8002bd6:	f103 0104 	add.w	r1, r3, #4
 8002bda:	6029      	str	r1, [r5, #0]
 8002bdc:	d501      	bpl.n	8002be2 <_printf_i+0xbe>
 8002bde:	681e      	ldr	r6, [r3, #0]
 8002be0:	e003      	b.n	8002bea <_printf_i+0xc6>
 8002be2:	0646      	lsls	r6, r0, #25
 8002be4:	d5fb      	bpl.n	8002bde <_printf_i+0xba>
 8002be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002bea:	2e00      	cmp	r6, #0
 8002bec:	da03      	bge.n	8002bf6 <_printf_i+0xd2>
 8002bee:	232d      	movs	r3, #45	; 0x2d
 8002bf0:	4276      	negs	r6, r6
 8002bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf6:	485a      	ldr	r0, [pc, #360]	; (8002d60 <_printf_i+0x23c>)
 8002bf8:	230a      	movs	r3, #10
 8002bfa:	e012      	b.n	8002c22 <_printf_i+0xfe>
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	1d19      	adds	r1, r3, #4
 8002c02:	6029      	str	r1, [r5, #0]
 8002c04:	0605      	lsls	r5, r0, #24
 8002c06:	d501      	bpl.n	8002c0c <_printf_i+0xe8>
 8002c08:	681e      	ldr	r6, [r3, #0]
 8002c0a:	e002      	b.n	8002c12 <_printf_i+0xee>
 8002c0c:	0641      	lsls	r1, r0, #25
 8002c0e:	d5fb      	bpl.n	8002c08 <_printf_i+0xe4>
 8002c10:	881e      	ldrh	r6, [r3, #0]
 8002c12:	4853      	ldr	r0, [pc, #332]	; (8002d60 <_printf_i+0x23c>)
 8002c14:	2f6f      	cmp	r7, #111	; 0x6f
 8002c16:	bf0c      	ite	eq
 8002c18:	2308      	moveq	r3, #8
 8002c1a:	230a      	movne	r3, #10
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c22:	6865      	ldr	r5, [r4, #4]
 8002c24:	60a5      	str	r5, [r4, #8]
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	bfa2      	ittt	ge
 8002c2a:	6821      	ldrge	r1, [r4, #0]
 8002c2c:	f021 0104 	bicge.w	r1, r1, #4
 8002c30:	6021      	strge	r1, [r4, #0]
 8002c32:	b90e      	cbnz	r6, 8002c38 <_printf_i+0x114>
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	d04b      	beq.n	8002cd0 <_printf_i+0x1ac>
 8002c38:	4615      	mov	r5, r2
 8002c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8002c42:	5dc7      	ldrb	r7, [r0, r7]
 8002c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c48:	4637      	mov	r7, r6
 8002c4a:	42bb      	cmp	r3, r7
 8002c4c:	460e      	mov	r6, r1
 8002c4e:	d9f4      	bls.n	8002c3a <_printf_i+0x116>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d10b      	bne.n	8002c6c <_printf_i+0x148>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	07de      	lsls	r6, r3, #31
 8002c58:	d508      	bpl.n	8002c6c <_printf_i+0x148>
 8002c5a:	6923      	ldr	r3, [r4, #16]
 8002c5c:	6861      	ldr	r1, [r4, #4]
 8002c5e:	4299      	cmp	r1, r3
 8002c60:	bfde      	ittt	le
 8002c62:	2330      	movle	r3, #48	; 0x30
 8002c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c6c:	1b52      	subs	r2, r2, r5
 8002c6e:	6122      	str	r2, [r4, #16]
 8002c70:	f8cd a000 	str.w	sl, [sp]
 8002c74:	464b      	mov	r3, r9
 8002c76:	aa03      	add	r2, sp, #12
 8002c78:	4621      	mov	r1, r4
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	f7ff fee4 	bl	8002a48 <_printf_common>
 8002c80:	3001      	adds	r0, #1
 8002c82:	d14a      	bne.n	8002d1a <_printf_i+0x1f6>
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	b004      	add	sp, #16
 8002c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	f043 0320 	orr.w	r3, r3, #32
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	4833      	ldr	r0, [pc, #204]	; (8002d64 <_printf_i+0x240>)
 8002c98:	2778      	movs	r7, #120	; 0x78
 8002c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	6829      	ldr	r1, [r5, #0]
 8002ca2:	061f      	lsls	r7, r3, #24
 8002ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ca8:	d402      	bmi.n	8002cb0 <_printf_i+0x18c>
 8002caa:	065f      	lsls	r7, r3, #25
 8002cac:	bf48      	it	mi
 8002cae:	b2b6      	uxthmi	r6, r6
 8002cb0:	07df      	lsls	r7, r3, #31
 8002cb2:	bf48      	it	mi
 8002cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8002cb8:	6029      	str	r1, [r5, #0]
 8002cba:	bf48      	it	mi
 8002cbc:	6023      	strmi	r3, [r4, #0]
 8002cbe:	b91e      	cbnz	r6, 8002cc8 <_printf_i+0x1a4>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	f023 0320 	bic.w	r3, r3, #32
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	2310      	movs	r3, #16
 8002cca:	e7a7      	b.n	8002c1c <_printf_i+0xf8>
 8002ccc:	4824      	ldr	r0, [pc, #144]	; (8002d60 <_printf_i+0x23c>)
 8002cce:	e7e4      	b.n	8002c9a <_printf_i+0x176>
 8002cd0:	4615      	mov	r5, r2
 8002cd2:	e7bd      	b.n	8002c50 <_printf_i+0x12c>
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	6826      	ldr	r6, [r4, #0]
 8002cd8:	6961      	ldr	r1, [r4, #20]
 8002cda:	1d18      	adds	r0, r3, #4
 8002cdc:	6028      	str	r0, [r5, #0]
 8002cde:	0635      	lsls	r5, r6, #24
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	d501      	bpl.n	8002ce8 <_printf_i+0x1c4>
 8002ce4:	6019      	str	r1, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <_printf_i+0x1ca>
 8002ce8:	0670      	lsls	r0, r6, #25
 8002cea:	d5fb      	bpl.n	8002ce4 <_printf_i+0x1c0>
 8002cec:	8019      	strh	r1, [r3, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6123      	str	r3, [r4, #16]
 8002cf2:	4615      	mov	r5, r2
 8002cf4:	e7bc      	b.n	8002c70 <_printf_i+0x14c>
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	1d1a      	adds	r2, r3, #4
 8002cfa:	602a      	str	r2, [r5, #0]
 8002cfc:	681d      	ldr	r5, [r3, #0]
 8002cfe:	6862      	ldr	r2, [r4, #4]
 8002d00:	2100      	movs	r1, #0
 8002d02:	4628      	mov	r0, r5
 8002d04:	f7fd fa6c 	bl	80001e0 <memchr>
 8002d08:	b108      	cbz	r0, 8002d0e <_printf_i+0x1ea>
 8002d0a:	1b40      	subs	r0, r0, r5
 8002d0c:	6060      	str	r0, [r4, #4]
 8002d0e:	6863      	ldr	r3, [r4, #4]
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	2300      	movs	r3, #0
 8002d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d18:	e7aa      	b.n	8002c70 <_printf_i+0x14c>
 8002d1a:	6923      	ldr	r3, [r4, #16]
 8002d1c:	462a      	mov	r2, r5
 8002d1e:	4649      	mov	r1, r9
 8002d20:	4640      	mov	r0, r8
 8002d22:	47d0      	blx	sl
 8002d24:	3001      	adds	r0, #1
 8002d26:	d0ad      	beq.n	8002c84 <_printf_i+0x160>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	079b      	lsls	r3, r3, #30
 8002d2c:	d413      	bmi.n	8002d56 <_printf_i+0x232>
 8002d2e:	68e0      	ldr	r0, [r4, #12]
 8002d30:	9b03      	ldr	r3, [sp, #12]
 8002d32:	4298      	cmp	r0, r3
 8002d34:	bfb8      	it	lt
 8002d36:	4618      	movlt	r0, r3
 8002d38:	e7a6      	b.n	8002c88 <_printf_i+0x164>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	4632      	mov	r2, r6
 8002d3e:	4649      	mov	r1, r9
 8002d40:	4640      	mov	r0, r8
 8002d42:	47d0      	blx	sl
 8002d44:	3001      	adds	r0, #1
 8002d46:	d09d      	beq.n	8002c84 <_printf_i+0x160>
 8002d48:	3501      	adds	r5, #1
 8002d4a:	68e3      	ldr	r3, [r4, #12]
 8002d4c:	9903      	ldr	r1, [sp, #12]
 8002d4e:	1a5b      	subs	r3, r3, r1
 8002d50:	42ab      	cmp	r3, r5
 8002d52:	dcf2      	bgt.n	8002d3a <_printf_i+0x216>
 8002d54:	e7eb      	b.n	8002d2e <_printf_i+0x20a>
 8002d56:	2500      	movs	r5, #0
 8002d58:	f104 0619 	add.w	r6, r4, #25
 8002d5c:	e7f5      	b.n	8002d4a <_printf_i+0x226>
 8002d5e:	bf00      	nop
 8002d60:	08003157 	.word	0x08003157
 8002d64:	08003168 	.word	0x08003168

08002d68 <__sflush_r>:
 8002d68:	898a      	ldrh	r2, [r1, #12]
 8002d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6e:	4605      	mov	r5, r0
 8002d70:	0710      	lsls	r0, r2, #28
 8002d72:	460c      	mov	r4, r1
 8002d74:	d458      	bmi.n	8002e28 <__sflush_r+0xc0>
 8002d76:	684b      	ldr	r3, [r1, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dc05      	bgt.n	8002d88 <__sflush_r+0x20>
 8002d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	dc02      	bgt.n	8002d88 <__sflush_r+0x20>
 8002d82:	2000      	movs	r0, #0
 8002d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d8a:	2e00      	cmp	r6, #0
 8002d8c:	d0f9      	beq.n	8002d82 <__sflush_r+0x1a>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d94:	682f      	ldr	r7, [r5, #0]
 8002d96:	6a21      	ldr	r1, [r4, #32]
 8002d98:	602b      	str	r3, [r5, #0]
 8002d9a:	d032      	beq.n	8002e02 <__sflush_r+0x9a>
 8002d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	075a      	lsls	r2, r3, #29
 8002da2:	d505      	bpl.n	8002db0 <__sflush_r+0x48>
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	1ac0      	subs	r0, r0, r3
 8002da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002daa:	b10b      	cbz	r3, 8002db0 <__sflush_r+0x48>
 8002dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dae:	1ac0      	subs	r0, r0, r3
 8002db0:	2300      	movs	r3, #0
 8002db2:	4602      	mov	r2, r0
 8002db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002db6:	6a21      	ldr	r1, [r4, #32]
 8002db8:	4628      	mov	r0, r5
 8002dba:	47b0      	blx	r6
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	d106      	bne.n	8002dd0 <__sflush_r+0x68>
 8002dc2:	6829      	ldr	r1, [r5, #0]
 8002dc4:	291d      	cmp	r1, #29
 8002dc6:	d82b      	bhi.n	8002e20 <__sflush_r+0xb8>
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <__sflush_r+0x108>)
 8002dca:	410a      	asrs	r2, r1
 8002dcc:	07d6      	lsls	r6, r2, #31
 8002dce:	d427      	bmi.n	8002e20 <__sflush_r+0xb8>
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6062      	str	r2, [r4, #4]
 8002dd4:	04d9      	lsls	r1, r3, #19
 8002dd6:	6922      	ldr	r2, [r4, #16]
 8002dd8:	6022      	str	r2, [r4, #0]
 8002dda:	d504      	bpl.n	8002de6 <__sflush_r+0x7e>
 8002ddc:	1c42      	adds	r2, r0, #1
 8002dde:	d101      	bne.n	8002de4 <__sflush_r+0x7c>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	b903      	cbnz	r3, 8002de6 <__sflush_r+0x7e>
 8002de4:	6560      	str	r0, [r4, #84]	; 0x54
 8002de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002de8:	602f      	str	r7, [r5, #0]
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d0c9      	beq.n	8002d82 <__sflush_r+0x1a>
 8002dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002df2:	4299      	cmp	r1, r3
 8002df4:	d002      	beq.n	8002dfc <__sflush_r+0x94>
 8002df6:	4628      	mov	r0, r5
 8002df8:	f7ff fc96 	bl	8002728 <_free_r>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8002e00:	e7c0      	b.n	8002d84 <__sflush_r+0x1c>
 8002e02:	2301      	movs	r3, #1
 8002e04:	4628      	mov	r0, r5
 8002e06:	47b0      	blx	r6
 8002e08:	1c41      	adds	r1, r0, #1
 8002e0a:	d1c8      	bne.n	8002d9e <__sflush_r+0x36>
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0c5      	beq.n	8002d9e <__sflush_r+0x36>
 8002e12:	2b1d      	cmp	r3, #29
 8002e14:	d001      	beq.n	8002e1a <__sflush_r+0xb2>
 8002e16:	2b16      	cmp	r3, #22
 8002e18:	d101      	bne.n	8002e1e <__sflush_r+0xb6>
 8002e1a:	602f      	str	r7, [r5, #0]
 8002e1c:	e7b1      	b.n	8002d82 <__sflush_r+0x1a>
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e24:	81a3      	strh	r3, [r4, #12]
 8002e26:	e7ad      	b.n	8002d84 <__sflush_r+0x1c>
 8002e28:	690f      	ldr	r7, [r1, #16]
 8002e2a:	2f00      	cmp	r7, #0
 8002e2c:	d0a9      	beq.n	8002d82 <__sflush_r+0x1a>
 8002e2e:	0793      	lsls	r3, r2, #30
 8002e30:	680e      	ldr	r6, [r1, #0]
 8002e32:	bf08      	it	eq
 8002e34:	694b      	ldreq	r3, [r1, #20]
 8002e36:	600f      	str	r7, [r1, #0]
 8002e38:	bf18      	it	ne
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	eba6 0807 	sub.w	r8, r6, r7
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	f1b8 0f00 	cmp.w	r8, #0
 8002e46:	dd9c      	ble.n	8002d82 <__sflush_r+0x1a>
 8002e48:	6a21      	ldr	r1, [r4, #32]
 8002e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	463a      	mov	r2, r7
 8002e50:	4628      	mov	r0, r5
 8002e52:	47b0      	blx	r6
 8002e54:	2800      	cmp	r0, #0
 8002e56:	dc06      	bgt.n	8002e66 <__sflush_r+0xfe>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5e:	81a3      	strh	r3, [r4, #12]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	e78e      	b.n	8002d84 <__sflush_r+0x1c>
 8002e66:	4407      	add	r7, r0
 8002e68:	eba8 0800 	sub.w	r8, r8, r0
 8002e6c:	e7e9      	b.n	8002e42 <__sflush_r+0xda>
 8002e6e:	bf00      	nop
 8002e70:	dfbffffe 	.word	0xdfbffffe

08002e74 <_fflush_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	690b      	ldr	r3, [r1, #16]
 8002e78:	4605      	mov	r5, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	b913      	cbnz	r3, 8002e84 <_fflush_r+0x10>
 8002e7e:	2500      	movs	r5, #0
 8002e80:	4628      	mov	r0, r5
 8002e82:	bd38      	pop	{r3, r4, r5, pc}
 8002e84:	b118      	cbz	r0, 8002e8e <_fflush_r+0x1a>
 8002e86:	6a03      	ldr	r3, [r0, #32]
 8002e88:	b90b      	cbnz	r3, 8002e8e <_fflush_r+0x1a>
 8002e8a:	f7ff fb35 	bl	80024f8 <__sinit>
 8002e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f3      	beq.n	8002e7e <_fflush_r+0xa>
 8002e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e98:	07d0      	lsls	r0, r2, #31
 8002e9a:	d404      	bmi.n	8002ea6 <_fflush_r+0x32>
 8002e9c:	0599      	lsls	r1, r3, #22
 8002e9e:	d402      	bmi.n	8002ea6 <_fflush_r+0x32>
 8002ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ea2:	f7ff fc3e 	bl	8002722 <__retarget_lock_acquire_recursive>
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	f7ff ff5d 	bl	8002d68 <__sflush_r>
 8002eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eb0:	07da      	lsls	r2, r3, #31
 8002eb2:	4605      	mov	r5, r0
 8002eb4:	d4e4      	bmi.n	8002e80 <_fflush_r+0xc>
 8002eb6:	89a3      	ldrh	r3, [r4, #12]
 8002eb8:	059b      	lsls	r3, r3, #22
 8002eba:	d4e1      	bmi.n	8002e80 <_fflush_r+0xc>
 8002ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ebe:	f7ff fc31 	bl	8002724 <__retarget_lock_release_recursive>
 8002ec2:	e7dd      	b.n	8002e80 <_fflush_r+0xc>

08002ec4 <__swbuf_r>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	460e      	mov	r6, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	4605      	mov	r5, r0
 8002ecc:	b118      	cbz	r0, 8002ed6 <__swbuf_r+0x12>
 8002ece:	6a03      	ldr	r3, [r0, #32]
 8002ed0:	b90b      	cbnz	r3, 8002ed6 <__swbuf_r+0x12>
 8002ed2:	f7ff fb11 	bl	80024f8 <__sinit>
 8002ed6:	69a3      	ldr	r3, [r4, #24]
 8002ed8:	60a3      	str	r3, [r4, #8]
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	071a      	lsls	r2, r3, #28
 8002ede:	d525      	bpl.n	8002f2c <__swbuf_r+0x68>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	b31b      	cbz	r3, 8002f2c <__swbuf_r+0x68>
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	6922      	ldr	r2, [r4, #16]
 8002ee8:	1a98      	subs	r0, r3, r2
 8002eea:	6963      	ldr	r3, [r4, #20]
 8002eec:	b2f6      	uxtb	r6, r6
 8002eee:	4283      	cmp	r3, r0
 8002ef0:	4637      	mov	r7, r6
 8002ef2:	dc04      	bgt.n	8002efe <__swbuf_r+0x3a>
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f7ff ffbc 	bl	8002e74 <_fflush_r>
 8002efc:	b9e0      	cbnz	r0, 8002f38 <__swbuf_r+0x74>
 8002efe:	68a3      	ldr	r3, [r4, #8]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60a3      	str	r3, [r4, #8]
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	6022      	str	r2, [r4, #0]
 8002f0a:	701e      	strb	r6, [r3, #0]
 8002f0c:	6962      	ldr	r2, [r4, #20]
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d004      	beq.n	8002f1e <__swbuf_r+0x5a>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	07db      	lsls	r3, r3, #31
 8002f18:	d506      	bpl.n	8002f28 <__swbuf_r+0x64>
 8002f1a:	2e0a      	cmp	r6, #10
 8002f1c:	d104      	bne.n	8002f28 <__swbuf_r+0x64>
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4628      	mov	r0, r5
 8002f22:	f7ff ffa7 	bl	8002e74 <_fflush_r>
 8002f26:	b938      	cbnz	r0, 8002f38 <__swbuf_r+0x74>
 8002f28:	4638      	mov	r0, r7
 8002f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f000 f806 	bl	8002f40 <__swsetup_r>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0d5      	beq.n	8002ee4 <__swbuf_r+0x20>
 8002f38:	f04f 37ff 	mov.w	r7, #4294967295
 8002f3c:	e7f4      	b.n	8002f28 <__swbuf_r+0x64>
	...

08002f40 <__swsetup_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <__swsetup_r+0xac>)
 8002f44:	4605      	mov	r5, r0
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	460c      	mov	r4, r1
 8002f4a:	b118      	cbz	r0, 8002f54 <__swsetup_r+0x14>
 8002f4c:	6a03      	ldr	r3, [r0, #32]
 8002f4e:	b90b      	cbnz	r3, 8002f54 <__swsetup_r+0x14>
 8002f50:	f7ff fad2 	bl	80024f8 <__sinit>
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f5a:	0718      	lsls	r0, r3, #28
 8002f5c:	d422      	bmi.n	8002fa4 <__swsetup_r+0x64>
 8002f5e:	06d9      	lsls	r1, r3, #27
 8002f60:	d407      	bmi.n	8002f72 <__swsetup_r+0x32>
 8002f62:	2309      	movs	r3, #9
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	e034      	b.n	8002fdc <__swsetup_r+0x9c>
 8002f72:	0758      	lsls	r0, r3, #29
 8002f74:	d512      	bpl.n	8002f9c <__swsetup_r+0x5c>
 8002f76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f78:	b141      	cbz	r1, 8002f8c <__swsetup_r+0x4c>
 8002f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f7e:	4299      	cmp	r1, r3
 8002f80:	d002      	beq.n	8002f88 <__swsetup_r+0x48>
 8002f82:	4628      	mov	r0, r5
 8002f84:	f7ff fbd0 	bl	8002728 <_free_r>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	2300      	movs	r3, #0
 8002f96:	6063      	str	r3, [r4, #4]
 8002f98:	6923      	ldr	r3, [r4, #16]
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	6923      	ldr	r3, [r4, #16]
 8002fa6:	b94b      	cbnz	r3, 8002fbc <__swsetup_r+0x7c>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb2:	d003      	beq.n	8002fbc <__swsetup_r+0x7c>
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 f840 	bl	800303c <__smakebuf_r>
 8002fbc:	89a0      	ldrh	r0, [r4, #12]
 8002fbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fc2:	f010 0301 	ands.w	r3, r0, #1
 8002fc6:	d00a      	beq.n	8002fde <__swsetup_r+0x9e>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60a3      	str	r3, [r4, #8]
 8002fcc:	6963      	ldr	r3, [r4, #20]
 8002fce:	425b      	negs	r3, r3
 8002fd0:	61a3      	str	r3, [r4, #24]
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	b943      	cbnz	r3, 8002fe8 <__swsetup_r+0xa8>
 8002fd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002fda:	d1c4      	bne.n	8002f66 <__swsetup_r+0x26>
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	0781      	lsls	r1, r0, #30
 8002fe0:	bf58      	it	pl
 8002fe2:	6963      	ldrpl	r3, [r4, #20]
 8002fe4:	60a3      	str	r3, [r4, #8]
 8002fe6:	e7f4      	b.n	8002fd2 <__swsetup_r+0x92>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e7f7      	b.n	8002fdc <__swsetup_r+0x9c>
 8002fec:	20000074 	.word	0x20000074

08002ff0 <__swhatbuf_r>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	b096      	sub	sp, #88	; 0x58
 8002ffc:	4615      	mov	r5, r2
 8002ffe:	461e      	mov	r6, r3
 8003000:	da0d      	bge.n	800301e <__swhatbuf_r+0x2e>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	bf0c      	ite	eq
 800300e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003012:	2340      	movne	r3, #64	; 0x40
 8003014:	2000      	movs	r0, #0
 8003016:	6031      	str	r1, [r6, #0]
 8003018:	602b      	str	r3, [r5, #0]
 800301a:	b016      	add	sp, #88	; 0x58
 800301c:	bd70      	pop	{r4, r5, r6, pc}
 800301e:	466a      	mov	r2, sp
 8003020:	f000 f848 	bl	80030b4 <_fstat_r>
 8003024:	2800      	cmp	r0, #0
 8003026:	dbec      	blt.n	8003002 <__swhatbuf_r+0x12>
 8003028:	9901      	ldr	r1, [sp, #4]
 800302a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800302e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003032:	4259      	negs	r1, r3
 8003034:	4159      	adcs	r1, r3
 8003036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303a:	e7eb      	b.n	8003014 <__swhatbuf_r+0x24>

0800303c <__smakebuf_r>:
 800303c:	898b      	ldrh	r3, [r1, #12]
 800303e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003040:	079d      	lsls	r5, r3, #30
 8003042:	4606      	mov	r6, r0
 8003044:	460c      	mov	r4, r1
 8003046:	d507      	bpl.n	8003058 <__smakebuf_r+0x1c>
 8003048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	6123      	str	r3, [r4, #16]
 8003050:	2301      	movs	r3, #1
 8003052:	6163      	str	r3, [r4, #20]
 8003054:	b002      	add	sp, #8
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	ab01      	add	r3, sp, #4
 800305a:	466a      	mov	r2, sp
 800305c:	f7ff ffc8 	bl	8002ff0 <__swhatbuf_r>
 8003060:	9900      	ldr	r1, [sp, #0]
 8003062:	4605      	mov	r5, r0
 8003064:	4630      	mov	r0, r6
 8003066:	f7ff f92f 	bl	80022c8 <_malloc_r>
 800306a:	b948      	cbnz	r0, 8003080 <__smakebuf_r+0x44>
 800306c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003070:	059a      	lsls	r2, r3, #22
 8003072:	d4ef      	bmi.n	8003054 <__smakebuf_r+0x18>
 8003074:	f023 0303 	bic.w	r3, r3, #3
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	e7e3      	b.n	8003048 <__smakebuf_r+0xc>
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	6020      	str	r0, [r4, #0]
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	81a3      	strh	r3, [r4, #12]
 800308a:	9b00      	ldr	r3, [sp, #0]
 800308c:	6163      	str	r3, [r4, #20]
 800308e:	9b01      	ldr	r3, [sp, #4]
 8003090:	6120      	str	r0, [r4, #16]
 8003092:	b15b      	cbz	r3, 80030ac <__smakebuf_r+0x70>
 8003094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003098:	4630      	mov	r0, r6
 800309a:	f000 f81d 	bl	80030d8 <_isatty_r>
 800309e:	b128      	cbz	r0, 80030ac <__smakebuf_r+0x70>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	431d      	orrs	r5, r3
 80030b0:	81a5      	strh	r5, [r4, #12]
 80030b2:	e7cf      	b.n	8003054 <__smakebuf_r+0x18>

080030b4 <_fstat_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4d07      	ldr	r5, [pc, #28]	; (80030d4 <_fstat_r+0x20>)
 80030b8:	2300      	movs	r3, #0
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	f7fd faf4 	bl	80006ae <_fstat>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	d102      	bne.n	80030d0 <_fstat_r+0x1c>
 80030ca:	682b      	ldr	r3, [r5, #0]
 80030cc:	b103      	cbz	r3, 80030d0 <_fstat_r+0x1c>
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	bd38      	pop	{r3, r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	20000508 	.word	0x20000508

080030d8 <_isatty_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4d06      	ldr	r5, [pc, #24]	; (80030f4 <_isatty_r+0x1c>)
 80030dc:	2300      	movs	r3, #0
 80030de:	4604      	mov	r4, r0
 80030e0:	4608      	mov	r0, r1
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	f7fd faf3 	bl	80006ce <_isatty>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d102      	bne.n	80030f2 <_isatty_r+0x1a>
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	b103      	cbz	r3, 80030f2 <_isatty_r+0x1a>
 80030f0:	6023      	str	r3, [r4, #0]
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
 80030f4:	20000508 	.word	0x20000508

080030f8 <_init>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr

08003104 <_fini>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr
